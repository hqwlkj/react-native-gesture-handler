"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[782],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),g=r,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},746:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>O,contentTitle:()=>C,default:()=>R,frontMatter:()=>k,metadata:()=>I,toc:()=>E});var a=n(9668),r=n(6540),o=n(5680),i=n(53),l=n(3104),s=n(6347),u=n(7485),p=n(1682),d=n(9466);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function g(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=g(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=y({queryString:n,groupId:a}),[p,c]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),h=(()=>{const e=s??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),c(e)}),[u,c,o]),tabValues:o}}var f=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==o&&(d(t),s(a))},g=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:g,onClick:c},l,{className:(0,i.A)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=h(e);return r.createElement("div",{className:(0,i.A)("tabs-container",b.tabList)},r.createElement(v,(0,a.A)({},e,t)),r.createElement(w,(0,a.A)({},e,t)))}function x(e){const t=(0,f.A)();return r.createElement(N,(0,a.A)({key:String(t)},e))}const S={tabItem:"tabItem_Ymn6"};function T(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.A)(S.tabItem,a),hidden:n},t)}const k={id:"installation",title:"Installation",sidebar_position:2},C=void 0,I={unversionedId:"fundamentals/installation",id:"fundamentals/installation",title:"Installation",description:"Requirements",source:"@site/docs/fundamentals/installation.md",sourceDirName:"fundamentals",slug:"/fundamentals/installation",permalink:"/react-native-gesture-handler/docs/fundamentals/installation",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/fundamentals/installation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"installation",title:"Installation",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/react-native-gesture-handler/docs/"},next:{title:"Gesture composition & interactions",permalink:"/react-native-gesture-handler/docs/fundamentals/gesture-composition"}},O={},E=[{value:"Requirements",id:"requirements",level:2},{value:"1. Start with installing the package from npm:",id:"1-start-with-installing-the-package-from-npm",level:3},{value:"2. Wrap your app with <code>GestureHandlerRootView</code> component",id:"2-wrap-your-app-with-gesturehandlerrootview-component",level:3},{value:"3. Platform specific setup",id:"3-platform-specific-setup",level:3},{value:"Expo development build",id:"expo-development-build",level:4},{value:"Android",id:"android",level:4},{value:"Kotlin",id:"kotlin",level:5},{value:"iOS",id:"ios",level:4},{value:"Web",id:"web",level:4},{value:"With wix/react-native-navigation",id:"with-wixreact-native-navigation",level:4}],V={toc:E},H="wrapper";function R(e){let{components:t,...n}=e;return(0,o.yg)(H,(0,a.A)({},V,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"requirements"},"Requirements"),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"version"),(0,o.yg)("th",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"th"},"react-native")," version"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"2.21.0+"),(0,o.yg)("td",{parentName:"tr",align:null},"0.74.0+")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"2.18.0+"),(0,o.yg)("td",{parentName:"tr",align:null},"0.73.0+")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"2.16.0+"),(0,o.yg)("td",{parentName:"tr",align:null},"0.68.0+")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"2.14.0+"),(0,o.yg)("td",{parentName:"tr",align:null},"0.67.0+")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"2.10.0+"),(0,o.yg)("td",{parentName:"tr",align:null},"0.64.0+")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"2.0.0+"),(0,o.yg)("td",{parentName:"tr",align:null},"0.63.0+")))),(0,o.yg)("p",null,"In order to fully utilize the ",(0,o.yg)("a",{parentName:"p",href:"/docs/gestures/touch-events/"},"touch events")," you also need to use ",(0,o.yg)("inlineCode",{parentName:"p"},"react-native-reanimated")," 2.3.0 or newer."),(0,o.yg)("p",null,"Setting up ",(0,o.yg)("inlineCode",{parentName:"p"},"react-native-gesture-handler")," is pretty straightforward:"),(0,o.yg)("h3",{id:"1-start-with-installing-the-package-from-npm"},"1. Start with installing the package from npm:"),(0,o.yg)(x,{groupId:"package-managers",mdxType:"Tabs"},(0,o.yg)(T,{value:"expo",label:"EXPO",default:!0,mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npx expo install react-native-gesture-handler\n"))),(0,o.yg)(T,{value:"npm",label:"NPM",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npm install react-native-gesture-handler\n"))),(0,o.yg)(T,{value:"yarn",label:"YARN",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"yarn add react-native-gesture-handler\n")))),(0,o.yg)("h3",{id:"2-wrap-your-app-with-gesturehandlerrootview-component"},"2. Wrap your app with ",(0,o.yg)("inlineCode",{parentName:"h3"},"GestureHandlerRootView")," component"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"import { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView>\n      <ActualApp />\n    </GestureHandlerRootView>\n  );\n}\n")),(0,o.yg)("p",null,"If you don't provide anything to the ",(0,o.yg)("inlineCode",{parentName:"p"},"styles")," prop, it will default to ",(0,o.yg)("inlineCode",{parentName:"p"},"flex: 1"),". If you want to customize the styling of the root view, don't forget to also include ",(0,o.yg)("inlineCode",{parentName:"p"},"flex: 1")," in the custom style, otherwise your app won't render anything. Keep ",(0,o.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView")," as close to the actual root of the app as possible. It's the entry point for all gestures and all gesture relations. The gestures won't be recognized outside of the root view, and relations only work between gestures mounted under the same root view."),(0,o.yg)("p",null,"If you're unsure if one of your dependencies already renders ",(0,o.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView")," on its own, don't worry and add one at the root anyway. In case of nested root views, Gesture Handler will only use the top-most one and ignore the nested ones."),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"If you're using gesture handler in your component library, you may want to wrap your library's code in the ",(0,o.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView")," component. This will avoid extra configuration for the user.")),(0,o.yg)("h3",{id:"3-platform-specific-setup"},"3. Platform specific setup"),(0,o.yg)("h4",{id:"expo-development-build"},(0,o.yg)("a",{parentName:"h4",href:"https://docs.expo.dev/develop/development-builds/introduction/"},"Expo development build")),(0,o.yg)("p",null,"When using an Expo development build, run prebuild to update the native code in the ios and android directories."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npx expo prebuild\n")),(0,o.yg)("h4",{id:"android"},"Android"),(0,o.yg)("p",null,"Setting up Gesture Handler on Android doesn't require any more steps. Keep in mind that if you want to use gestures in Modals you need to wrap Modal's content with ",(0,o.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"import { Modal } from 'react-native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport function CustomModal({ children, ...rest }) {\n  return (\n    <Modal {...rest}>\n      <GestureHandlerRootView>\n        {children}\n      </GestureHandlerRootView>\n    </Modal>\n  );\n}\n")),(0,o.yg)("h5",{id:"kotlin"},"Kotlin"),(0,o.yg)("p",null,"Gesture Handler on Android is implemented in Kotlin. If you need to set a specific Kotlin version to be used by the library, set the ",(0,o.yg)("inlineCode",{parentName:"p"},"kotlinVersion")," ext property in ",(0,o.yg)("inlineCode",{parentName:"p"},"android/build.gradle")," file and RNGH will use that version:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-groovy"},'buildscript {\n    ext {\n        kotlinVersion = "1.6.21"\n    }\n}\n')),(0,o.yg)("h4",{id:"ios"},"iOS"),(0,o.yg)("p",null,"While developing for iOS, make sure to install ",(0,o.yg)("a",{parentName:"p",href:"https://cocoapods.org/"},"pods")," first before running the app:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"cd ios && pod install && cd ..\n")),(0,o.yg)("h4",{id:"web"},"Web"),(0,o.yg)("p",null,"There is no additional configuration required for the web, however, since the Gesture Handler 2.10.0 the new web implementation is enabled by default. We recommend you to check if the gestures in your app are working as expected since their behavior should now resemble the native platforms. If you don't want to use the new implementation, you can still revert back to the legacy one by enabling it at the beginning of your ",(0,o.yg)("inlineCode",{parentName:"p"},"index.js")," file:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import { enableLegacyWebImplementation } from 'react-native-gesture-handler';\n\nenableLegacyWebImplementation(true);\n")),(0,o.yg)("p",null,"Nonetheless, it's recommended to adapt to the new implementation, as the legacy one will be dropped in the next major release of Gesture Handler."),(0,o.yg)("h4",{id:"with-wixreact-native-navigation"},"With ",(0,o.yg)("a",{parentName:"h4",href:"https://github.com/wix/react-native-navigation"},"wix/react-native-navigation")),(0,o.yg)("p",null,"If you are using a native navigation library like ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/wix/react-native-navigation"},"wix/react-native-navigation")," you need to make sure that every screen is wrapped with ",(0,o.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView")," (you can do this using ",(0,o.yg)("inlineCode",{parentName:"p"},"gestureHandlerRootHOC")," function). This can be done for example at the stage when you register your screens. Here's an example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import { gestureHandlerRootHOC } from 'react-native-gesture-handler';\nimport { Navigation } from 'react-native-navigation';\nimport FirstTabScreen from './FirstTabScreen';\nimport SecondTabScreen from './SecondTabScreen';\nimport PushedScreen from './PushedScreen';\n// register all screens of the app (including internal ones)\nexport function registerScreens() {\n  Navigation.registerComponent(\n    'example.FirstTabScreen',\n    () => gestureHandlerRootHOC(FirstTabScreen),\n    () => FirstTabScreen\n  );\n  Navigation.registerComponent(\n    'example.SecondTabScreen',\n    () => gestureHandlerRootHOC(SecondTabScreen),\n    () => SecondTabScreen\n  );\n  Navigation.registerComponent(\n    'example.PushedScreen',\n    () => gestureHandlerRootHOC(PushedScreen),\n    () => PushedScreen\n  );\n}\n")),(0,o.yg)("p",null,"You can check out ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/henrikra/nativeNavigationGestureHandler"},"this example project")," to see this kind of set up in action."),(0,o.yg)("p",null,"Remember that you need to wrap each screen that you use in your app with ",(0,o.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView")," (you can do this using ",(0,o.yg)("inlineCode",{parentName:"p"},"gestureHandlerRootHOC")," function) as with native navigation libraries each screen maps to a separate root view. It will not be enough to wrap the main screen only."))}R.isMDXComponent=!0}}]);