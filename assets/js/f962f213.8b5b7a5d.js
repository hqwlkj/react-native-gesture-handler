"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[432],{4649:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"api/gesture-handlers/nativeview-gh","title":"NativeViewGestureHandler","description":"A gesture handler that allows other touch handling components to participate in","source":"@site/versioned_docs/version-1.x/api/gesture-handlers/nativeview-gh.md","sourceDirName":"api/gesture-handlers","slug":"/api/gesture-handlers/nativeview-gh","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/nativeview-gh","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/versioned_docs/version-1.x/api/gesture-handlers/nativeview-gh.md","tags":[],"version":"1.x","frontMatter":{"id":"nativeview-gh","title":"NativeViewGestureHandler","sidebar_label":"NativeView"},"sidebar":"docs","previous":{"title":"Force touch","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/force-gh"},"next":{"title":"createNativeWrapper()","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/create-native-wrapper"}}');var i=r(4848),s=r(8453);const a={id:"nativeview-gh",title:"NativeViewGestureHandler",sidebar_label:"NativeView"},o=void 0,d={},l=[{value:"Properties",id:"properties",level:2},{value:"<code>shouldActivateOnStart</code> (<strong>Android only</strong>)",id:"shouldactivateonstart-android-only",level:3},{value:"<code>disallowInterruption</code>",id:"disallowinterruption",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"A gesture handler that allows other touch handling components to participate in\nRNGH's gesture system."}),"\n",(0,i.jsxs)(t.p,{children:["Used by ",(0,i.jsx)(t.a,{href:"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/create-native-wrapper",children:(0,i.jsx)(t.code,{children:"createNativeWrapper()"})}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(t.p,{children:["See ",(0,i.jsx)(t.a,{href:"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/common-gh#properties",children:"set of properties inherited from base handler class"}),". Below is a list of properties specific to ",(0,i.jsx)(t.code,{children:"NativeViewGestureHandler"})," component:"]}),"\n",(0,i.jsxs)(t.h3,{id:"shouldactivateonstart-android-only",children:[(0,i.jsx)(t.code,{children:"shouldActivateOnStart"})," (",(0,i.jsx)(t.strong,{children:"Android only"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsx)(t.code,{children:"true"}),", underlying handler will activate unconditionally when in ",(0,i.jsx)(t.code,{children:"BEGAN"})," or ",(0,i.jsx)(t.code,{children:"UNDETERMINED"})," state."]}),"\n",(0,i.jsx)(t.h3,{id:"disallowinterruption",children:(0,i.jsx)(t.code,{children:"disallowInterruption"})}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsx)(t.code,{children:"true"}),", cancels all other gesture handlers when this ",(0,i.jsx)(t.code,{children:"NativeViewGestureHandler"})," receives an ",(0,i.jsx)(t.code,{children:"ACTIVE"})," state event."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var n=r(6540);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);