"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[6923],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},9100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"gesture-handlers/interactions","title":"Cross handler interactions","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","source":"@site/docs/gesture-handlers/interactions.md","sourceDirName":"gesture-handlers","slug":"/gesture-handlers/interactions","permalink":"/react-native-gesture-handler/docs/gesture-handlers/interactions","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/gesture-handlers/interactions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"interactions","title":"Cross handler interactions","sidebar_label":"Cross handler interactions","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"About Gesture Handlers","permalink":"/react-native-gesture-handler/docs/gesture-handlers/about-handlers"},"next":{"title":"Common handler properties","permalink":"/react-native-gesture-handler/docs/gesture-handlers/common-gh"}}');var r=t(4848),s=t(8453);const i={id:"interactions",title:"Cross handler interactions",sidebar_label:"Cross handler interactions",sidebar_position:3},o=void 0,l={},d=[{value:"Simultaneous recognition",id:"simultaneous-recognition",level:2},{value:"Use cases",id:"use-cases",level:3},{value:"Example",id:"example",level:3},{value:"Awaiting other handlers",id:"awaiting-other-handlers",level:2},{value:"Use cases",id:"use-cases-1",level:3},{value:"Example",id:"example-1",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["The old API will be removed in the future version of Gesture Handler. Please migrate to ",(0,r.jsx)(n.a,{href:"/docs/gestures/gesture",children:"gestures API"})," instead. Check out our ",(0,r.jsx)(n.a,{href:"/docs/guides/upgrading-to-2",children:"upgrading guide"})," for more information."]})}),"\n",(0,r.jsxs)(n.p,{children:['Gesture handlers can "communicate" with each other to support complex gestures and control how they ',(0,r.jsx)(n.em,{children:(0,r.jsx)(n.a,{href:"/docs/under-the-hood/state#active",children:"activate"})})," in certain scenarios."]}),"\n",(0,r.jsxs)(n.p,{children:["There are two means of achieving that described in the sections below.\nIn each case, it is necessary to provide a reference of one handler as a property to the other.\nGesture handler relies on ref objects created using ",(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/refs-and-the-dom.html",children:(0,r.jsx)(n.code,{children:"React.createRef()"})})," and introduced in ",(0,r.jsx)(n.a,{href:"https://reactjs.org/blog/2018/03/29/react-v-16-3.html#createref-api",children:"React 16.3"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"simultaneous-recognition",children:"Simultaneous recognition"}),"\n",(0,r.jsxs)(n.p,{children:["By default, only one gesture handler is allowed to be in the ",(0,r.jsx)(n.a,{href:"/docs/under-the-hood/state#active",children:(0,r.jsx)(n.code,{children:"ACTIVE"})})," state.\nSo when a gesture handler recognizes a gesture it ",(0,r.jsx)(n.a,{href:"/docs/under-the-hood/state#cancelled",children:"cancels"})," all other handlers in the ",(0,r.jsx)(n.a,{href:"/docs/under-the-hood/state#began",children:(0,r.jsx)(n.code,{children:"BEGAN"})})," state and prevents any new handlers from receiving a stream of touch events as long as it remains ",(0,r.jsx)(n.a,{href:"/docs/under-the-hood/state#active",children:(0,r.jsx)(n.code,{children:"ACTIVE"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This behavior can be altered using the ",(0,r.jsx)(n.a,{href:"/docs/gesture-handlers/common-gh#simultaneoushandlers",children:(0,r.jsx)(n.code,{children:"simultaneousHandlers"})})," property (available for all types of handlers).\nThis property accepts a ref or an array of refs to other handlers.\nHandlers connected in this way will be allowed to remain in the ",(0,r.jsx)(n.a,{href:"/docs/under-the-hood/state#active",children:(0,r.jsx)(n.code,{children:"ACTIVE"})})," state at the same time."]}),"\n",(0,r.jsx)(n.h3,{id:"use-cases",children:"Use cases"}),"\n",(0,r.jsxs)(n.p,{children:["Simultaneous recognition needs to be used when implementing a photo preview component that supports zooming (scaling) the photo, rotating and panning it while zoomed in.\nIn this case we would use a ",(0,r.jsx)(n.a,{href:"/docs/gesture-handlers/pinch-gh",children:(0,r.jsx)(n.code,{children:"PinchGestureHandler"})}),", ",(0,r.jsx)(n.a,{href:"/docs/gesture-handlers/rotation-gh",children:(0,r.jsx)(n.code,{children:"RotationGestureHandler"})})," and ",(0,r.jsx)(n.a,{href:"/docs/gesture-handlers/pan-gh",children:(0,r.jsx)(n.code,{children:"PanGestureHandler"})})," that would have to simultaneously recognize gestures."]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/recipes/scaleAndRotate/index.tsx",children:'"Scale, rotate & tilt" example'})," from the GestureHandler Example App or view it directly on your phone by visiting ",(0,r.jsx)(n.a,{href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo",children:"our expo demo"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class PinchableBox extends React.Component {\n  // ...take a look on full implementation in an Example app\n  render() {\n    const imagePinch = React.createRef();\n    const imageRotation = React.createRef();\n    return (\n      <RotationGestureHandler\n        ref={imageRotation}\n        simultaneousHandlers={imagePinch}\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.View>\n          <PinchGestureHandler\n            ref={imagePinch}\n            simultaneousHandlers={imageRotation}\n            onGestureEvent={this._onPinchGestureEvent}\n            onHandlerStateChange={this._onPinchHandlerStateChange}>\n            <Animated.View style={styles.container} collapsable={false}>\n              <Animated.Image\n                style={[\n                  styles.pinchableImage,\n                  {\n                    /* events-related transformations */\n                  },\n                ]}\n              />\n            </Animated.View>\n          </PinchGestureHandler>\n        </Animated.View>\n      </RotationGestureHandler>\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"awaiting-other-handlers",children:"Awaiting other handlers"}),"\n",(0,r.jsx)(n.h3,{id:"use-cases-1",children:"Use cases"}),"\n",(0,r.jsxs)(n.p,{children:["A good example where awaiting is necessary is when we want to have single and double tap handlers registered for one view (a button).\nIn such a case we need to make single tap handler await a double tap.\nOtherwise if we try to perform a double tap the single tap handler will fire just after we hit the button for the first time, consequently ",(0,r.jsx)(n.a,{href:"/docs/under-the-hood/state#cancelled",children:"cancelling"})," the double tap handler."]}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/basic/multitap/index.tsx",children:'"Multitap" example'})," from GestureHandler Example App or view it directly on your phone by visiting ",(0,r.jsx)(n.a,{href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo",children:"our expo demo"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const doubleTap = React.createRef();\nconst PressBox = () => (\n  <TapGestureHandler\n    onHandlerStateChange={({ nativeEvent }) =>\n      nativeEvent.state === State.ACTIVE && Alert.alert('Single tap!')\n    }\n    waitFor={doubleTap}>\n    <TapGestureHandler\n      ref={doubleTap}\n      onHandlerStateChange={({ nativeEvent }) =>\n        nativeEvent.state === State.ACTIVE && Alert.alert(\"You're so fast\")\n      }\n      numberOfTaps={2}>\n      <View style={styles.box} />\n    </TapGestureHandler>\n  </TapGestureHandler>\n);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);