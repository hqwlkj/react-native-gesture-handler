"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[5221],{4412:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"Gesture Handler aims to replace React Native\'s built in touch system called Gesture Responder System.","source":"@site/versioned_docs/version-1.x/getting-started.md","sourceDirName":".","slug":"/","permalink":"/react-native-gesture-handler/docs/1.x/","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/versioned_docs/version-1.x/getting-started.md","tags":[],"version":"1.x","frontMatter":{"id":"getting-started","title":"Getting Started","sidebar_label":"Getting Started","slug":"/"},"sidebar":"docs","next":{"title":"About Gesture Handlers","permalink":"/react-native-gesture-handler/docs/1.x/about-handlers"}}');var r=t(4848),a=t(8453);const s={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started",slug:"/"},o=void 0,d={},l=[{value:"Installation",id:"installation",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Expo",id:"expo",level:3},{value:"Managed Expo",id:"managed-expo",level:4},{value:"Bare React Native",id:"bare-react-native",level:4},{value:"JS",id:"js",level:3},{value:"Linking",id:"linking",level:4},{value:"Android",id:"android",level:3},{value:"Updating <code>MainActivity.java</code>",id:"updating-mainactivityjava",level:4},{value:"Usage with modals on Android",id:"usage-with-modals-on-android",level:4},{value:"iOS",id:"ios",level:3},{value:"With wix/react-native-navigation",id:"with-wixreact-native-navigation",level:3},{value:"Testing",id:"testing",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Gesture Handler aims to replace React Native's built in touch system called ",(0,r.jsx)(n.a,{href:"http://reactnative.dev/docs/gesture-responder-system",children:"Gesture Responder System"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The motivation for building this library was to address the performance limitations of React Native's Gesture Responder System and to provide more control over the built-in native components that can handle gestures.\nWe recommend ",(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=V8maYc4R2G0",children:"this talk"})," by ",(0,r.jsx)(n.a,{href:"https://twitter.com/kzzzf",children:"Krzysztof Magiera"})," in which he explains issues with the responder system."]}),"\n",(0,r.jsx)(n.p,{children:"In a nutshell, the library provides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A way to use a platform's native touch handling system for recognizing pinch, rotation and pan (besides a few other gestures)."}),"\n",(0,r.jsxs)(n.li,{children:["The ability to define relations between gesture handlers, e.g. when you have a pan handler in ",(0,r.jsx)(n.code,{children:"ScrollView"})," you can make that ",(0,r.jsx)(n.code,{children:"ScrollView"})," wait until it knows pan won't recognize."]}),"\n",(0,r.jsx)(n.li,{children:"Mechanisms to use touchables that run in native thread and follow platform default behavior; e.g. in the event they are in a scrollable component, turning into pressed state is slightly delayed to prevent it from highlighting when you fling."}),"\n",(0,r.jsx)(n.li,{children:"The possibility to implement smooth gesture interactions thanks to Animated Native Driver \u2014 interactions will be responsive even when the JS thread is overloaded."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"version"}),(0,r.jsxs)(n.th,{children:[(0,r.jsx)(n.code,{children:"react-native"})," version"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.4.0+"}),(0,r.jsx)(n.td,{children:"0.60.0+"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.1.0+"}),(0,r.jsx)(n.td,{children:"0.57.2+"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"<1.1.0"}),(0,r.jsx)(n.td,{children:"0.50.0+"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["It may be possible to use newer versions of react-native-gesture-handler on React Native with version <= 0.59 by reverse Jetifying.\nRead more on that here ",(0,r.jsx)(n.a,{href:"https://github.com/mikehardy/jetifier#to-reverse-jetify--convert-node_modules-dependencies-to-support-libraries",children:"https://github.com/mikehardy/jetifier#to-reverse-jetify--convert-node_modules-dependencies-to-support-libraries"})]}),"\n",(0,r.jsxs)(n.p,{children:["Note that if you wish to use ",(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/refs-and-the-dom.html",children:(0,r.jsx)(n.code,{children:"React.createRef()"})})," support for ",(0,r.jsx)(n.a,{href:"/react-native-gesture-handler/docs/1.x/interactions",children:"interactions"})," you need to use v16.3 of ",(0,r.jsx)(n.a,{href:"https://reactjs.org/",children:"React"})]}),"\n",(0,r.jsx)(n.h3,{id:"expo",children:"Expo"}),"\n",(0,r.jsxs)(n.h4,{id:"managed-expo",children:["Managed ",(0,r.jsx)(n.a,{href:"https://expo.io",children:"Expo"})]}),"\n",(0,r.jsxs)(n.p,{children:["To use the version of react-native-gesture-handler that is compatible with your managed Expo project, run ",(0,r.jsx)(n.code,{children:"expo install react-native-gesture-handler"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The Expo SDK incorporates the latest version of react-native-gesture-handler available at the time of each SDK release, so managed Expo apps might not always support all our latest features as soon as they are available."}),"\n",(0,r.jsxs)(n.h4,{id:"bare-react-native",children:["Bare ",(0,r.jsx)(n.a,{href:"http://reactnative.dev/",children:"React Native"})]}),"\n",(0,r.jsxs)(n.p,{children:["Since the library uses native support for handling gestures, it requires an extended installation to the norm. If you are starting a new project, you may want to initialize it with ",(0,r.jsx)(n.a,{href:"https://docs.expo.io/versions/latest/workflow/expo-cli/",children:"expo-cli"})," and use a bare template, they come pre-installed with react-native-gesture-handler."]}),"\n",(0,r.jsx)(n.h3,{id:"js",children:"JS"}),"\n",(0,r.jsxs)(n.p,{children:["First, install the library using ",(0,r.jsx)(n.code,{children:"yarn"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add react-native-gesture-handler\n"})}),"\n",(0,r.jsxs)(n.p,{children:["or with ",(0,r.jsx)(n.code,{children:"npm"})," if you prefer:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save react-native-gesture-handler\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After installation, wrap your entry point with ",(0,r.jsx)(n.code,{children:"<GestureHandlerRootView>"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default function App() {\n  return <GestureHandlerRootView>{/* content */}</GestureHandlerRootView>;\n}\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["If you use props such as ",(0,r.jsx)(n.code,{children:"shouldCancelWhenOutside"}),", ",(0,r.jsx)(n.code,{children:"simultaneousHandlers"}),", ",(0,r.jsx)(n.code,{children:"waitFor"})," etc. with gesture handlers, the handlers need to be mounted under a single ",(0,r.jsx)(n.code,{children:"GestureHandlerRootView"}),". So it's important to keep the ",(0,r.jsx)(n.code,{children:"GestureHandlerRootView"})," as close to the actual root view as possible."]}),(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"GestureHandlerRootView"})," acts like a normal ",(0,r.jsx)(n.code,{children:"View"}),". So if you want it to fill the screen, you will need to pass ",(0,r.jsx)(n.code,{children:"{ flex: 1 }"})," like you'll need to do with a normal ",(0,r.jsx)(n.code,{children:"View"}),". By default, it'll take the size of the content nested inside."]})]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"If you're using gesture handler in your component library, you may want to wrap your library's code in the GestureHandlerRootView component. This will avoid extra configuration for the user."})}),"\n",(0,r.jsx)(n.h4,{id:"linking",children:"Linking"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": You only need to do this step if you're using React Native 0.59 or lower. Since v0.60, linking happens automatically."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"react-native link react-native-gesture-handler\n"})}),"\n",(0,r.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,r.jsx)(n.p,{children:"Follow the steps below:"}),"\n",(0,r.jsxs)(n.p,{children:["If you use one of the ",(0,r.jsx)(n.em,{children:"native navigation libraries"})," (e.g.\n",(0,r.jsx)(n.a,{href:"https://github.com/wix/react-native-navigation",children:"wix/react-native-navigation"}),"),\nyou should follow ",(0,r.jsx)(n.a,{href:"#with-wixreact-native-navigation",children:"this separate guide"})," to get\ngesture handler library set up on Android. Ignore the rest of this step \u2013 it\nonly applies to RN apps that use a standard Android project layout."]}),"\n",(0,r.jsxs)(n.h4,{id:"updating-mainactivityjava",children:["Updating ",(0,r.jsx)(n.code,{children:"MainActivity.java"})]}),"\n",(0,r.jsxs)(n.p,{children:["Update your ",(0,r.jsx)(n.code,{children:"MainActivity.java"})," file (or wherever you create an instance of ",(0,r.jsx)(n.code,{children:"ReactActivityDelegate"}),"), so that it overrides the method responsible for creating ",(0,r.jsx)(n.code,{children:"ReactRootView"})," instance and then use the root view wrapper provided by this library. Do not forget to import ",(0,r.jsx)(n.code,{children:"ReactActivityDelegate"}),", ",(0,r.jsx)(n.code,{children:"ReactRootView"}),", and ",(0,r.jsx)(n.code,{children:"RNGestureHandlerEnabledRootView"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'package com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\n+ import com.facebook.react.ReactActivityDelegate;\n+ import com.facebook.react.ReactRootView;\n+ import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return "Example";\n  }\n\n+  @Override\n+  protected ReactActivityDelegate createReactActivityDelegate() {\n+    return new ReactActivityDelegate(this, getMainComponentName()) {\n+      @Override\n+      protected ReactRootView createRootView() {\n+       return new RNGestureHandlerEnabledRootView(MainActivity.this);\n+      }\n+    };\n+  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"usage-with-modals-on-android",children:"Usage with modals on Android"}),"\n",(0,r.jsxs)(n.p,{children:["On Android RNGH does not work by default because modals are not located under React Native Root view in native hierarchy.\nTo fix that, components need to be wrapped with ",(0,r.jsx)(n.code,{children:"GestureHandlerRootView"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default function Example() {\n  return (\n    <Modal>\n      <GestureHandlerRootView>\n        <DraggableBox />\n      </GestureHandlerRootView>\n    </Modal>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,r.jsx)(n.p,{children:"There is no additional configuration required on iOS except what follows in the next steps."}),"\n",(0,r.jsx)(n.p,{children:"If you're in a CocoaPods project (the default setup since React Native 0.60),\nmake sure to install pods before you run your app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ios && pod install\n"})}),"\n",(0,r.jsx)(n.p,{children:"For React Native 0.61 or greater, add the library as the first import in your index.js file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import 'react-native-gesture-handler';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"with-wixreact-native-navigation",children:["With ",(0,r.jsx)(n.a,{href:"https://github.com/wix/react-native-navigation",children:"wix/react-native-navigation"})]}),"\n",(0,r.jsxs)(n.p,{children:["If you are using a native navigation library like ",(0,r.jsx)(n.a,{href:"https://github.com/wix/react-native-navigation",children:"wix/react-native-navigation"})," you need to follow a different setup for your Android app to work properly. The reason is that both native navigation libraries and Gesture Handler library need to use their own special subclasses of ",(0,r.jsx)(n.code,{children:"ReactRootView"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Instead of changing Java code you will need to wrap every screen component using ",(0,r.jsx)(n.code,{children:"GestureHandlerRootView"})," on the JS side. This can be done for example at the stage when you register your screens. Here's an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Navigation } from 'react-native-navigation';\n\nimport FirstTabScreen from './FirstTabScreen';\nimport SecondTabScreen from './SecondTabScreen';\nimport PushedScreen from './PushedScreen';\n\n// register all screens of the app (including internal ones)\nexport function registerScreens() {\n  Navigation.registerComponent(\n    'example.FirstTabScreen',\n    () => {\n      return (\n        <GestureHandlerRootView>\n          <FirstTabScreen />\n        </GestureHandlerRootView>\n      );\n    },\n    () => FirstTabScreen\n  );\n  Navigation.registerComponent(\n    'example.SecondTabScreen',\n    () => {\n      return (\n        <GestureHandlerRootView>\n          <SecondTabScreen />\n        </GestureHandlerRootView>\n      );\n    },\n    () => SecondTabScreen\n  );\n  Navigation.registerComponent(\n    'example.PushedScreen',\n    () => {\n      return (\n        <GestureHandlerRootView>\n          <PushedScreen />\n        </GestureHandlerRootView>\n      );\n    },\n    () => PushedScreen\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can check out ",(0,r.jsx)(n.a,{href:"https://github.com/henrikra/nativeNavigationGestureHandler",children:"this example project"})," to see this kind of set up in action."]}),"\n",(0,r.jsxs)(n.p,{children:["Remember that you need to wrap each screen that you use in your app with ",(0,r.jsx)(n.code,{children:"GestureHandlerRootView"})," as with native navigation libraries each screen maps to a separate root view. It will not be enough to wrap the main screen only."]}),"\n",(0,r.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,r.jsxs)(n.p,{children:["In order to load mocks provided by the library add following to your jest config in ",(0,r.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"setupFiles": ["./node_modules/react-native-gesture-handler/jestSetup.js"]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"jest": {\n  "preset": "react-native",\n  "setupFiles": ["./node_modules/react-native-gesture-handler/jestSetup.js"]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);