"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[8148],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>h});var a=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,h=d["".concat(s,".").concat(g)]||d[g]||p[g]||r;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1124:(e,t,n)=>{n.d(t,{H6:()=>l,Zs:()=>i,AR:()=>s});const a="vanishOnMobile_l34e",o="appearOnMobile_WsAs",r="container_L6Kw",[l,i,s]=[o,a,r]},5368:(e,t,n)=>{n.d(t,{Ay:()=>i});var a=n(8168),o=(n(6540),n(5680));const r={toc:[{value:"Callbacks common to all continuous gestures:",id:"callbacks-common-to-all-continuous-gestures",level:3},{value:"<code>onUpdate(callback)</code>",id:"onupdatecallback",level:3},{value:"<code>onChange(callback)</code>",id:"onchangecallback",level:3}]},l="wrapper";function i(e){let{components:t,...n}=e;return(0,o.yg)(l,(0,a.A)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"callbacks-common-to-all-continuous-gestures"},"Callbacks common to all continuous gestures:"),(0,o.yg)("h3",{id:"onupdatecallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onUpdate(callback)")),(0,o.yg)("p",null,"Set the callback that is being called every time the gesture receives an update while it's active."),(0,o.yg)("h3",{id:"onchangecallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onChange(callback)")),(0,o.yg)("p",null,"Set the callback that is being called every time the gesture receives an update while it's active. This callback will receive information about change in value in relation to the last received event."))}i.isMDXComponent=!0},7168:(e,t,n)=>{n.d(t,{Ay:()=>i});var a=n(8168),o=(n(6540),n(5680));const r={toc:[{value:"Callbacks common to all gestures:",id:"callbacks-common-to-all-gestures",level:3},{value:"<code>onBegin(callback)</code>",id:"onbegincallback",level:3},{value:"<code>onStart(callback)</code>",id:"onstartcallback",level:3},{value:"<code>onEnd(callback)</code>",id:"onendcallback",level:3},{value:"<code>onFinalize(callback)</code>",id:"onfinalizecallback",level:3},{value:"<code>onTouchesDown(callback)</code>",id:"ontouchesdowncallback",level:3},{value:"<code>onTouchesMove(callback)</code>",id:"ontouchesmovecallback",level:3},{value:"<code>onTouchesUp(callback)</code>",id:"ontouchesupcallback",level:3},{value:"<code>onTouchesCancelled(callback)</code>",id:"ontouchescancelledcallback",level:3}]},l="wrapper";function i(e){let{components:t,...n}=e;return(0,o.yg)(l,(0,a.A)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"callbacks-common-to-all-gestures"},"Callbacks common to all gestures:"),(0,o.yg)("h3",{id:"onbegincallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onBegin(callback)")),(0,o.yg)("p",null,"Set the callback that is being called when given gesture handler starts receiving touches. At the moment of this callback the handler is not yet in an active state and we don't know yet if it will recognize the gesture at all."),(0,o.yg)("h3",{id:"onstartcallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onStart(callback)")),(0,o.yg)("p",null,"Set the callback that is being called when the gesture is recognized by the handler and it transitions to the active state."),(0,o.yg)("h3",{id:"onendcallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onEnd(callback)")),(0,o.yg)("p",null,"Set the callback that is being called when the gesture that was recognized by the handler finishes. It will be called only if the handler was previously in the active state."),(0,o.yg)("h3",{id:"onfinalizecallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onFinalize(callback)")),(0,o.yg)("p",null,"Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize."),(0,o.yg)("h3",{id:"ontouchesdowncallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onTouchesDown(callback)")),(0,o.yg)("p",null,"Set the ",(0,o.yg)("inlineCode",{parentName:"p"},"onTouchesDown")," callback which is called every time a finger is placed on the screen."),(0,o.yg)("h3",{id:"ontouchesmovecallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onTouchesMove(callback)")),(0,o.yg)("p",null,"Set the ",(0,o.yg)("inlineCode",{parentName:"p"},"onTouchesMove")," callback which is called every time a finger is moved on the screen."),(0,o.yg)("h3",{id:"ontouchesupcallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onTouchesUp(callback)")),(0,o.yg)("p",null,"Set the ",(0,o.yg)("inlineCode",{parentName:"p"},"onTouchesUp")," callback which is called every time a finger is lifted from the screen."),(0,o.yg)("h3",{id:"ontouchescancelledcallback"},(0,o.yg)("inlineCode",{parentName:"h3"},"onTouchesCancelled(callback)")),(0,o.yg)("p",null,"Set the ",(0,o.yg)("inlineCode",{parentName:"p"},"onTouchesCancelled")," callback which is called every time a finger stops being tracked, for example when the gesture finishes."))}i.isMDXComponent=!0},4076:(e,t,n)=>{n.d(t,{Ay:()=>i});var a=n(8168),o=(n(6540),n(5680));const r={toc:[{value:"Properties common to all gestures:",id:"properties-common-to-all-gestures",level:3},{value:"<code>enabled(value: boolean)</code>",id:"enabledvalue-boolean",level:3},{value:"<code>shouldCancelWhenOutside(value: boolean)</code>",id:"shouldcancelwhenoutsidevalue-boolean",level:3},{value:"<code>hitSlop(settings)</code>",id:"hitslopsettings",level:3},{value:"<code>withRef(ref)</code>",id:"withrefref",level:3},{value:"<code>withTestId(testID)</code>",id:"withtestidtestid",level:3},{value:"<code>cancelsTouchesInView(value)</code> (<strong>iOS only</strong>)",id:"cancelstouchesinviewvalue-ios-only",level:3},{value:"<code>runOnJS(value: boolean)</code>",id:"runonjsvalue-boolean",level:3},{value:"<code>simultaneousWithExternalGesture(otherGesture1, otherGesture2, ...)</code>",id:"simultaneouswithexternalgestureothergesture1-othergesture2-",level:3},{value:"<code>requireExternalGestureToFail(otherGesture1, otherGesture2, ...)</code>",id:"requireexternalgesturetofailothergesture1-othergesture2-",level:3},{value:"<code>blocksExternalGesture(otherGesture1, otherGesture2, ...)</code>",id:"blocksexternalgestureothergesture1-othergesture2-",level:3},{value:"<code>activeCursor(value)</code> (Web only)",id:"activecursorvalue-web-only",level:3}]},l="wrapper";function i(e){let{components:t,...n}=e;return(0,o.yg)(l,(0,a.A)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"properties-common-to-all-gestures"},"Properties common to all gestures:"),(0,o.yg)("h3",{id:"enabledvalue-boolean"},(0,o.yg)("inlineCode",{parentName:"h3"},"enabled(value: boolean)")),(0,o.yg)("p",null,"Indicates whether the given handler should be analyzing stream of touch events or not.\nWhen set to ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," we can be sure that the handler's state will ",(0,o.yg)("strong",{parentName:"p"},"never")," become ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events#active"},(0,o.yg)("inlineCode",{parentName:"a"},"ACTIVE")),".\nIf the value gets updated while the handler already started recognizing a gesture, then the handler's state it will immediately change to ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events#failed"},(0,o.yg)("inlineCode",{parentName:"a"},"FAILED"))," or ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events#cancelled"},(0,o.yg)("inlineCode",{parentName:"a"},"CANCELLED"))," (depending on its current state).\nDefault value is ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,o.yg)("h3",{id:"shouldcancelwhenoutsidevalue-boolean"},(0,o.yg)("inlineCode",{parentName:"h3"},"shouldCancelWhenOutside(value: boolean)")),(0,o.yg)("p",null,"When ",(0,o.yg)("inlineCode",{parentName:"p"},"true")," the handler will ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events#cancelled"},"cancel")," or ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events#failed"},"fail")," recognition (depending on its current state) whenever the finger leaves the area of the connected view.\nDefault value of this property is different depending on the handler type.\nMost handlers' ",(0,o.yg)("inlineCode",{parentName:"p"},"shouldCancelWhenOutside")," property defaults to ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," except for the ",(0,o.yg)("a",{parentName:"p",href:"/docs/gestures/long-press-gesture"},(0,o.yg)("inlineCode",{parentName:"a"},"LongPressGesture"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/gestures/tap-gesture"},(0,o.yg)("inlineCode",{parentName:"a"},"TapGesture"))," which default to ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,o.yg)("h3",{id:"hitslopsettings"},(0,o.yg)("inlineCode",{parentName:"h3"},"hitSlop(settings)")),(0,o.yg)("p",null,"This parameter enables control over what part of the connected view area can be used to ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events#began"},"begin")," recognizing the gesture.\nWhen a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly."),(0,o.yg)("p",null,"Instead you can pass an object to specify how each boundary side should be reduced by providing different number of points for ",(0,o.yg)("inlineCode",{parentName:"p"},"left"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"right"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"top")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"bottom")," sides.\nYou can alternatively provide ",(0,o.yg)("inlineCode",{parentName:"p"},"horizontal")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"vertical")," instead of specifying directly ",(0,o.yg)("inlineCode",{parentName:"p"},"left"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"right")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"top")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"bottom"),".\nFinally, the object can also take ",(0,o.yg)("inlineCode",{parentName:"p"},"width")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"height")," attributes.\nWhen ",(0,o.yg)("inlineCode",{parentName:"p"},"width")," is set it is only allow to specify one of the sides ",(0,o.yg)("inlineCode",{parentName:"p"},"right")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"left"),".\nSimilarly when ",(0,o.yg)("inlineCode",{parentName:"p"},"height")," is provided only ",(0,o.yg)("inlineCode",{parentName:"p"},"top")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"bottom")," can be set.\nSpecifying ",(0,o.yg)("inlineCode",{parentName:"p"},"width")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"height")," is useful if we only want the gesture to activate on the edge of the view. In which case for example we can set ",(0,o.yg)("inlineCode",{parentName:"p"},"left: 0")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"width: 20")," which would make it possible for the gesture to be recognize when started no more than 20 points from the left edge."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"IMPORTANT:")," Note that this parameter is primarily designed to reduce the area where gesture can activate. Hence it is only supported for all the values (except ",(0,o.yg)("inlineCode",{parentName:"p"},"width")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"height"),") to be non positive (0 or lower). Although on Android it is supported for the values to also be positive and therefore allow to expand beyond view bounds but not further than the parent view bounds. To achieve this effect on both platforms you can use React Native's View ",(0,o.yg)("a",{parentName:"p",href:"https://reactnative.dev/docs/view.html#hitslop"},"hitSlop")," property."),(0,o.yg)("h3",{id:"withrefref"},(0,o.yg)("inlineCode",{parentName:"h3"},"withRef(ref)")),(0,o.yg)("p",null,"Sets a ref to the gesture object, allowing for interoperability with the old\nAPI."),(0,o.yg)("h3",{id:"withtestidtestid"},(0,o.yg)("inlineCode",{parentName:"h3"},"withTestId(testID)")),(0,o.yg)("p",null,"Sets a ",(0,o.yg)("inlineCode",{parentName:"p"},"testID")," property for gesture object, allowing for querying for it in tests."),(0,o.yg)("h3",{id:"cancelstouchesinviewvalue-ios-only"},(0,o.yg)("inlineCode",{parentName:"h3"},"cancelsTouchesInView(value)")," (",(0,o.yg)("strong",{parentName:"h3"},"iOS only"),")"),(0,o.yg)("p",null,"Accepts a boolean value.\nWhen ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),", the gesture will cancel touches for native UI components (",(0,o.yg)("inlineCode",{parentName:"p"},"UIButton"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"UISwitch"),", etc) it's attached to when it becomes ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events#active"},(0,o.yg)("inlineCode",{parentName:"a"},"ACTIVE")),".\nDefault value is ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,o.yg)("h3",{id:"runonjsvalue-boolean"},(0,o.yg)("inlineCode",{parentName:"h3"},"runOnJS(value: boolean)")),(0,o.yg)("p",null,"When ",(0,o.yg)("inlineCode",{parentName:"p"},"react-native-reanimated")," is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called. This option allows for changing this behavior: when ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),", all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.\nDefaults to ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,o.yg)("h3",{id:"simultaneouswithexternalgestureothergesture1-othergesture2-"},(0,o.yg)("inlineCode",{parentName:"h3"},"simultaneousWithExternalGesture(otherGesture1, otherGesture2, ...)")),(0,o.yg)("p",null,"Adds a gesture that should be recognized simultaneously with this one."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"IMPORTANT:")," Note that this method only marks the relation between gestures, without ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/gesture-composition"},"composing them"),". ",(0,o.yg)("a",{parentName:"p",href:"/docs/gestures/gesture-detector"},(0,o.yg)("inlineCode",{parentName:"a"},"GestureDetector"))," will not recognize the ",(0,o.yg)("inlineCode",{parentName:"p"},"otherGestures")," and it needs to be added to another detector in order to be recognized."),(0,o.yg)("h3",{id:"requireexternalgesturetofailothergesture1-othergesture2-"},(0,o.yg)("inlineCode",{parentName:"h3"},"requireExternalGestureToFail(otherGesture1, otherGesture2, ...)")),(0,o.yg)("p",null,"Adds a relation requiring another gesture to fail, before this one can activate."),(0,o.yg)("h3",{id:"blocksexternalgestureothergesture1-othergesture2-"},(0,o.yg)("inlineCode",{parentName:"h3"},"blocksExternalGesture(otherGesture1, otherGesture2, ...)")),(0,o.yg)("p",null,"Adds a relation that makes other gestures wait with activation until this gesture fails (or doesn't start at all)."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"IMPORTANT:")," Note that this method only marks the relation between gestures, without ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/gesture-composition"},"composing them"),".",(0,o.yg)("a",{parentName:"p",href:"/docs/gestures/gesture-detector"},(0,o.yg)("inlineCode",{parentName:"a"},"GestureDetector"))," will not recognize the ",(0,o.yg)("inlineCode",{parentName:"p"},"otherGestures")," and it needs to be added to another detector in order to be recognized."),(0,o.yg)("h3",{id:"activecursorvalue-web-only"},(0,o.yg)("inlineCode",{parentName:"h3"},"activeCursor(value)")," (Web only)"),(0,o.yg)("p",null,"This parameter allows to specify which cursor should be used when gesture activates. Supports all CSS cursor values (e.g. ",(0,o.yg)("inlineCode",{parentName:"p"},'"grab"'),", ",(0,o.yg)("inlineCode",{parentName:"p"},'"zoom-in"'),"). Default value is set to ",(0,o.yg)("inlineCode",{parentName:"p"},'"auto"'),"."))}i.isMDXComponent=!0},9029:(e,t,n)=>{n.d(t,{Ay:()=>i});var a=n(8168),o=(n(6540),n(5680));const r={toc:[{value:"Event attributes common to all gestures:",id:"event-attributes-common-to-all-gestures",level:3},{value:"<code>state</code>",id:"state",level:3},{value:"<code>numberOfPointers</code>",id:"numberofpointers",level:3},{value:"<code>pointerType</code>",id:"pointertype",level:3}]},l="wrapper";function i(e){let{components:t,...n}=e;return(0,o.yg)(l,(0,a.A)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"event-attributes-common-to-all-gestures"},"Event attributes common to all gestures:"),(0,o.yg)("h3",{id:"state"},(0,o.yg)("inlineCode",{parentName:"h3"},"state")),(0,o.yg)("p",null,"Current ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/states-events"},"state")," of the handler. Expressed as one of the constants exported under ",(0,o.yg)("inlineCode",{parentName:"p"},"State")," object by the library."),(0,o.yg)("h3",{id:"numberofpointers"},(0,o.yg)("inlineCode",{parentName:"h3"},"numberOfPointers")),(0,o.yg)("p",null,"Represents the number of pointers (fingers) currently placed on the screen."),(0,o.yg)("h3",{id:"pointertype"},(0,o.yg)("inlineCode",{parentName:"h3"},"pointerType")),(0,o.yg)("p",null,"Indicates the type of pointer device in use. This value is represented by the ",(0,o.yg)("inlineCode",{parentName:"p"},"PointerType")," enum, which includes the following fields:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"TOUCH")," - represents finger"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"STYLUS")," - represents stylus or digital pen"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"MOUSE")," - represents computer mouse"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"KEY")," - represents keyboard"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"OTHER")," - represents unknown device type that is not relevant")))}i.isMDXComponent=!0},5524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>D,contentTitle:()=>G,default:()=>H,frontMatter:()=>A,metadata:()=>I,toc:()=>O});var a=n(8168),o=n(6540),r=n(5680),l=n(1124),i=n(6025),s=n(2827),c=n(1691),u=n(4524),d=n(14),p=n(880),g=n(3562),h=n(9119),y=n(2220);const m=u.G.bezier(1,-1,.3,1.43),v={code:"function anonymous(event){const{startX,startY}=this.__closure;startX.value=event.x;startY.value=event.y;}"},f={code:"function anonymous(event){const{translateX,startX,translateY,startY,progress}=this.__closure;translateX.value=(event.x-startX.value)*0.3;translateY.value=(event.y-startY.value)*0.3;const distance=Math.sqrt(Math.pow(translateX.value,2)+Math.pow(translateY.value,2));progress.value=distance/35;}"},b={code:"function anonymous(){const{translateX,withTiming,EASING,translateY,progress}=this.__closure;translateX.value=withTiming(0,{duration:400,easing:EASING});translateY.value=withTiming(0,{duration:400,easing:EASING});progress.value=withTiming(0,{duration:400,easing:EASING});}"},N={code:"function anonymous(){const{translateX,translateY,interpolateColor,progress}=this.__closure;return{transform:[{translateX:translateX.value},{translateY:translateY.value}],backgroundColor:interpolateColor(progress.value,[0,1],['#b58df1','#fa7f7c'])};}"};function w(){const e=(0,d.U)(0),t=(0,d.U)(0),n=(0,d.U)(0),a=(0,d.U)(0),r=(0,d.U)(0),l=s.q6.Hover().onStart(function(){const e=function(e){a.value=e.x,r.value=e.y};return e.__closure={startX:a,startY:r},e.__workletHash=267079267436,e.__initData=v,e}()).onUpdate(function(){const o=function(o){e.value=.3*(o.x-a.value),t.value=.3*(o.y-r.value);const l=Math.sqrt(Math.pow(e.value,2)+Math.pow(t.value,2));n.value=l/35};return o.__closure={translateX:e,startX:a,translateY:t,startY:r,progress:n},o.__workletHash=0xa1deeb499d8,o.__initData=f,o}()).onEnd(function(){const a=function(){e.value=(0,p.f)(0,{duration:400,easing:m}),t.value=(0,p.f)(0,{duration:400,easing:m}),n.value=(0,p.f)(0,{duration:400,easing:m})};return a.__closure={translateX:e,withTiming:p.f,EASING:m,translateY:t,progress:n},a.__workletHash=0xb46e012cb04,a.__initData=b,a}()),i=(0,g.m)(function(){const a=()=>({transform:[{translateX:e.value},{translateY:t.value}],backgroundColor:(0,h.De)(n.value,[0,1],["#b58df1","#fa7f7c"])});return a.__closure={translateX:e,translateY:t,interpolateColor:h.De,progress:n},a.__workletHash=8120172713973,a.__initData=N,a}());return o.createElement(s.Zy,{style:C.container},o.createElement(s.Sl,{gesture:l},o.createElement(y.X,{style:[C.box,i]})))}const C=c.A.create({container:{flex:1,alignItems:"center",justifyContent:"center"},box:{width:100,height:100,borderRadius:20,cursor:"pointer"}}),k="import React from 'react';\nimport {\n  Gesture,\n  GestureDetector,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  Easing,\n  interpolateColor,\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nconst EASING = Easing.bezier(1, -1, 0.3, 1.43);\n\nexport default function App() {\n  const translateX = useSharedValue(0);\n  const translateY = useSharedValue(0);\n\n  const progress = useSharedValue(0);\n\n  const startX = useSharedValue(0);\n  const startY = useSharedValue(0);\n\n  const hover = Gesture.Hover()\n    .onStart((event) => {\n      startX.value = event.x;\n      startY.value = event.y;\n    })\n    .onUpdate((event) => {\n      translateX.value = (event.x - startX.value) * 0.3;\n      translateY.value = (event.y - startY.value) * 0.3;\n\n      const distance = Math.sqrt(Math.pow(translateX.value, 2) + Math.pow(translateY.value, 2));\n\n      progress.value = distance / 35;\n    })\n    .onEnd(() => {\n      translateX.value = withTiming(0, {\n        duration: 400,\n        easing: EASING,\n      });\n      translateY.value = withTiming(0, {\n        duration: 400,\n        easing: EASING,\n      });\n      progress.value = withTiming(0, {\n        duration: 400,\n        easing: EASING,\n      });\n    });\n\n  const boxAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [\n      { translateX: translateX.value },\n      { translateY: translateY.value },\n    ],\n    backgroundColor: interpolateColor(\n      progress.value,\n      [0, 1],\n      ['#b58df1', '#fa7f7c']\n    )\n  }));\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <GestureDetector gesture={hover}>\n        <Animated.View style={[styles.box, boxAnimatedStyle]}></Animated.View>\n      </GestureDetector>\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 100,\n    borderRadius: 20,\n    cursor: 'pointer',\n  },\n});\n";var x=n(9029),S=n(4076),T=n(7168),E=n(5368);const A={id:"hover-gesture",title:"Hover gesture",sidebar_label:"Hover gesture",sidebar_position:9},G=void 0,I={unversionedId:"gestures/hover-gesture",id:"gestures/hover-gesture",title:"Hover gesture",description:"<InteractiveExample",source:"@site/docs/gestures/hover-gesture.md",sourceDirName:"gestures",slug:"/gestures/hover-gesture",permalink:"/react-native-gesture-handler/docs/gestures/hover-gesture",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/gestures/hover-gesture.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{id:"hover-gesture",title:"Hover gesture",sidebar_label:"Hover gesture",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Fling gesture",permalink:"/react-native-gesture-handler/docs/gestures/fling-gesture"},next:{title:"Force touch gesture",permalink:"/react-native-gesture-handler/docs/gestures/force-touch-gesture"}},D={},O=[{value:"Reference",id:"reference",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Config",id:"config",level:2},{value:"Properties specific to <code>HoverGesture</code>:",id:"properties-specific-to-hovergesture",level:3},{value:"<code>effect(effect: HoverEffect)</code> (iOS only)",id:"effecteffect-hovereffect-ios-only",level:3},{value:"Callbacks",id:"callbacks",level:2},{value:"Event data",id:"event-data",level:2},{value:"Event attributes specific to <code>HoverGesture</code>:",id:"event-attributes-specific-to-hovergesture",level:3},{value:"<code>x</code>",id:"x",level:3},{value:"<code>y</code>",id:"y",level:3},{value:"<code>absoluteX</code>",id:"absolutex",level:3},{value:"<code>absoluteY</code>",id:"absolutey",level:3},{value:"<code>stylusData</code>",id:"stylusdata",level:3}],X=(_="InteractiveExample",function(e){return console.warn("Component "+_+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",e)});var _;const P={toc:O},Y="wrapper";function H(e){let{components:t,...n}=e;return(0,r.yg)(Y,(0,a.A)({},P,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("div",{className:l.AR},(0,r.yg)("div",{className:l.Zs,style:{display:"flex",justifyContent:"center",maxWidth:360}},(0,r.yg)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,style:{maxWidth:360}},(0,r.yg)("source",{src:(0,i.A)("/video/hover.mp4"),type:"video/mp4"}))),(0,r.yg)(X,{component:(0,r.yg)(w,{mdxType:"HoverGestureBasic"}),src:k,disableMarginBottom:!0,mdxType:"InteractiveExample"})),(0,r.yg)("p",null,"A continuous gesture that can recognize hovering above the view it's attached to. The hover effect may be activated by moving a mouse or a stylus over the view."),(0,r.yg)("p",null,"On iOS additional visual effects may be configured."),(0,r.yg)("div",{className:l.H6,style:{display:"flex",justifyContent:"center"}},(0,r.yg)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,style:{maxWidth:360}},(0,r.yg)("source",{src:(0,i.A)("/video/hover.mp4"),type:"video/mp4"}))),(0,r.yg)("samp",{id:"HoverGestureBasic"},"Hover Gesture"),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"import { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  // highlight-next-line\n  const hover = Gesture.Hover();\n\n  return (\n    <GestureDetector gesture={hover}>\n      <View />\n    </GestureDetector>\n  );\n}\n")),(0,r.yg)("h2",{id:"remarks"},"Remarks"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Don't rely on ",(0,r.yg)("inlineCode",{parentName:"li"},"Hover")," gesture to continue after the mouse button is clicked or the stylus touches the screen. If you want to handle both cases, ",(0,r.yg)("a",{parentName:"li",href:"/docs/fundamentals/gesture-composition"},"compose")," it with ",(0,r.yg)("a",{parentName:"li",href:"/docs/gestures/pan-gesture"},(0,r.yg)("inlineCode",{parentName:"a"},"Pan")," gesture"),".")),(0,r.yg)("h2",{id:"config"},"Config"),(0,r.yg)("h3",{id:"properties-specific-to-hovergesture"},"Properties specific to ",(0,r.yg)("inlineCode",{parentName:"h3"},"HoverGesture"),":"),(0,r.yg)("h3",{id:"effecteffect-hovereffect-ios-only"},(0,r.yg)("inlineCode",{parentName:"h3"},"effect(effect: HoverEffect)")," (iOS only)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import { HoverEffect } from 'react-native-gesture-handler';\n")),(0,r.yg)("p",null,"Visual effect applied to the view while the view is hovered. The possible values are:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"HoverEffect.None")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"HoverEffect.Lift")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"HoverEffect.Highlight"))),(0,r.yg)("p",null,"Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"HoverEffect.None")),(0,r.yg)(S.Ay,{mdxType:"BaseEventConfig"}),(0,r.yg)("h2",{id:"callbacks"},"Callbacks"),(0,r.yg)(T.Ay,{mdxType:"BaseEventCallbacks"}),(0,r.yg)(E.Ay,{mdxType:"BaseContinuousEventCallbacks"}),(0,r.yg)("h2",{id:"event-data"},"Event data"),(0,r.yg)("h3",{id:"event-attributes-specific-to-hovergesture"},"Event attributes specific to ",(0,r.yg)("inlineCode",{parentName:"h3"},"HoverGesture"),":"),(0,r.yg)("h3",{id:"x"},(0,r.yg)("inlineCode",{parentName:"h3"},"x")),(0,r.yg)("p",null,"X coordinate of the current position of the pointer relative to the view attached to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/gestures/gesture-detector"},(0,r.yg)("inlineCode",{parentName:"a"},"GestureDetector")),". Expressed in point units."),(0,r.yg)("h3",{id:"y"},(0,r.yg)("inlineCode",{parentName:"h3"},"y")),(0,r.yg)("p",null,"Y coordinate of the current position of the pointer relative to the view attached to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/gestures/gesture-detector"},(0,r.yg)("inlineCode",{parentName:"a"},"GestureDetector")),". Expressed in point units."),(0,r.yg)("h3",{id:"absolutex"},(0,r.yg)("inlineCode",{parentName:"h3"},"absoluteX")),(0,r.yg)("p",null,"X coordinate of the current position of the pointer relative to the window. The value is expressed in point units. It is recommended to use it instead of ",(0,r.yg)("a",{parentName:"p",href:"#x"},(0,r.yg)("inlineCode",{parentName:"a"},"x"))," in cases when the original view can be transformed as an effect of the gesture."),(0,r.yg)("h3",{id:"absolutey"},(0,r.yg)("inlineCode",{parentName:"h3"},"absoluteY")),(0,r.yg)("p",null,"Y coordinate of the current position of the pointer relative to the window. The value is expressed in point units. It is recommended to use it instead of ",(0,r.yg)("a",{parentName:"p",href:"#y"},(0,r.yg)("inlineCode",{parentName:"a"},"y"))," in cases when the original view can be transformed as an effect of the gesture."),(0,r.yg)("h3",{id:"stylusdata"},(0,r.yg)("inlineCode",{parentName:"h3"},"stylusData")),(0,r.yg)("p",null,"Object that contains additional information about ",(0,r.yg)("inlineCode",{parentName:"p"},"stylus"),". It consists of the following fields:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX"},(0,r.yg)("inlineCode",{parentName:"a"},"tiltX"))," - angle in degrees between the Y-Z plane of the stylus and the screen."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY"},(0,r.yg)("inlineCode",{parentName:"a"},"tiltY"))," - angle in degrees between the X-Z plane of the stylus and the screen."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/altitudeAngle"},(0,r.yg)("inlineCode",{parentName:"a"},"altitudeAngle"))," - angle between stylus axis and the X-Y plane of a device screen."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/azimuthAngle"},(0,r.yg)("inlineCode",{parentName:"a"},"azimuthAngle"))," - angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure"},(0,r.yg)("inlineCode",{parentName:"a"},"pressure"))," - indicates the normalized pressure of the stylus.")),(0,r.yg)(x.Ay,{mdxType:"BaseEventData"}))}H.isMDXComponent=!0}}]);