"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[6062],{5680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>m});var n=r(6540);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(r),g=s,m=p["".concat(u,".").concat(g)]||p[g]||d[g]||o;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=g;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},3132:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(8168),s=(r(6540),r(5680));const o={id:"composed-gestures",title:"Composed gestures",sidebar_label:"Composed gestures",sidebar_position:13},a=void 0,i={unversionedId:"gestures/composed-gestures",id:"gestures/composed-gestures",title:"Composed gestures",description:"Composed gestures (Race, Simultaneous, Exclusive) provide a simple way of building relations between gestures. See Gesture Composition for more details.",source:"@site/docs/gestures/composed-gestures.md",sourceDirName:"gestures",slug:"/gestures/composed-gestures",permalink:"/react-native-gesture-handler/docs/gestures/composed-gestures",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/gestures/composed-gestures.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{id:"composed-gestures",title:"Composed gestures",sidebar_label:"Composed gestures",sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Manual gesture",permalink:"/react-native-gesture-handler/docs/gestures/manual-gesture"},next:{title:"Touch events",permalink:"/react-native-gesture-handler/docs/gestures/touch-events"}},u={},c=[{value:"Reference",id:"reference",level:2}],l={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,s.yg)(p,(0,n.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Composed gestures (",(0,s.yg)("inlineCode",{parentName:"p"},"Race"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"Simultaneous"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"Exclusive"),") provide a simple way of building relations between gestures. See ",(0,s.yg)("a",{parentName:"p",href:"/docs/fundamentals/gesture-composition"},"Gesture Composition")," for more details."),(0,s.yg)("h2",{id:"reference"},"Reference"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-jsx"},"import { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const pan = Gesture.Pan();\n  const longPress = Gesture.LongPress();\n\n  // highlight-next-line\n  const composed = Gesture.Race(pan, longPress);\n\n  return (\n    <GestureDetector gesture={composed}>\n      <Animated.View />\n    </GestureDetector>\n  );\n}\n")))}d.isMDXComponent=!0}}]);