"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[6062],{5384:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"gestures/composed-gestures","title":"Composed gestures","description":"Composed gestures (Race, Simultaneous, Exclusive) provide a simple way of building relations between gestures. See Gesture Composition for more details.","source":"@site/docs/gestures/composed-gestures.md","sourceDirName":"gestures","slug":"/gestures/composed-gestures","permalink":"/react-native-gesture-handler/docs/gestures/composed-gestures","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/gestures/composed-gestures.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"composed-gestures","title":"Composed gestures","sidebar_label":"Composed gestures","sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Manual gesture","permalink":"/react-native-gesture-handler/docs/gestures/manual-gesture"},"next":{"title":"Touch events","permalink":"/react-native-gesture-handler/docs/gestures/touch-events"}}');var n=t(4848),o=t(8453);const i={id:"composed-gestures",title:"Composed gestures",sidebar_label:"Composed gestures",sidebar_position:13},c=void 0,a={},u=[{value:"Reference",id:"reference",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["Composed gestures (",(0,n.jsx)(s.code,{children:"Race"}),", ",(0,n.jsx)(s.code,{children:"Simultaneous"}),", ",(0,n.jsx)(s.code,{children:"Exclusive"}),") provide a simple way of building relations between gestures. See ",(0,n.jsx)(s.a,{href:"/docs/fundamentals/gesture-composition",children:"Gesture Composition"})," for more details."]}),"\n",(0,n.jsx)(s.h2,{id:"reference",children:"Reference"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-jsx",children:"import { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const pan = Gesture.Pan();\n  const longPress = Gesture.LongPress();\n\n  // highlight-next-line\n  const composed = Gesture.Race(pan, longPress);\n\n  return (\n    <GestureDetector gesture={composed}>\n      <Animated.View />\n    </GestureDetector>\n  );\n}\n"})})]})}function l(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var r=t(6540);const n={},o=r.createContext(n);function i(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);