"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[7118],{1331:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/testing","title":"Testing with Jest","description":"Mocking native modules","source":"@site/docs/guides/testing.md","sourceDirName":"guides","slug":"/guides/testing","permalink":"/react-native-gesture-handler/docs/guides/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/guides/testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"testing","title":"Testing with Jest","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Troubleshooting","permalink":"/react-native-gesture-handler/docs/guides/troubleshooting"},"next":{"title":"Custom swipeable components inside ScrollView (web)","permalink":"/react-native-gesture-handler/docs/guides/swipe-and-scroll"}}');var i=n(4848),d=n(8453);const r={id:"testing",title:"Testing with Jest",sidebar_position:4},l=void 0,a={},c=[{value:"Mocking native modules",id:"mocking-native-modules",level:2},{value:"Testing Gestures&#39; and Gesture handlers&#39; callbacks",id:"testing-gestures-and-gesture-handlers-callbacks",level:2},{value:"fireGestureHandler(gestureOrHandler, eventList)",id:"firegesturehandlergestureorhandler-eventlist",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>gestureOrHandler</code>",id:"gestureorhandler",level:4},{value:"<code>eventList</code>",id:"eventlist",level:4},{value:"Example",id:"example",level:3},{value:"getByGestureTestId(testID)",id:"getbygesturetestidtestid",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"<code>testID</code>",id:"testid",level:4},{value:"Notes",id:"notes",level:3},{value:"Example",id:"example-1",level:3}];function o(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"mocking-native-modules",children:"Mocking native modules"}),"\n",(0,i.jsxs)(t.p,{children:["In order to load mocks provided by RNGH add following to your jest config in ",(0,i.jsx)(t.code,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'"setupFiles": ["./node_modules/react-native-gesture-handler/jestSetup.js"]\n'})}),"\n",(0,i.jsx)(t.p,{children:"Example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'"jest": {\n  "preset": "react-native",\n  "setupFiles": ["./node_modules/react-native-gesture-handler/jestSetup.js"]\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"testing-gestures-and-gesture-handlers-callbacks",children:"Testing Gestures' and Gesture handlers' callbacks"}),"\n",(0,i.jsx)(t.p,{children:"RNGH provides an API for triggering selected handlers:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/docs/guides/testing#firegesturehandlergestureorhandler-eventlist",children:(0,i.jsx)(t.code,{children:"fireGestureHandler(gestureOrHandler, eventList)"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/docs/guides/testing#getbygesturetestidtestid",children:(0,i.jsx)(t.code,{children:"getByGestureTestId(testID)"})})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"firegesturehandlergestureorhandler-eventlist",children:"fireGestureHandler(gestureOrHandler, eventList)"}),"\n",(0,i.jsxs)(t.p,{children:["Simulates one event stream (i.e. event sequence starting with ",(0,i.jsx)(t.code,{children:"BEGIN"})," state and ending\nwith one of ",(0,i.jsx)(t.code,{children:"END"}),"/",(0,i.jsx)(t.code,{children:"FAIL"}),"/",(0,i.jsx)(t.code,{children:"CANCEL"})," states), calling appropriate callbacks associated with given gesture handler."]}),"\n",(0,i.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsx)(t.h4,{id:"gestureorhandler",children:(0,i.jsx)(t.code,{children:"gestureOrHandler"})}),"\n",(0,i.jsx)(t.p,{children:"Represents either:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Gesture handler component found by Jest queries (e.g. ",(0,i.jsx)(t.code,{children:"getByTestId"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Gesture found by ",(0,i.jsx)(t.a,{href:"/docs/guides/testing#getbygesturetestidtestid",children:(0,i.jsx)(t.code,{children:"getByGestureTestId()"})})]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"eventlist",children:(0,i.jsx)(t.code,{children:"eventList"})}),"\n",(0,i.jsx)(t.p,{children:"Event data passed to appropriate callback. RNGH fills event list if required\ndata is missing using these rules:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"oldState"})," is filled using state of the previous event. ",(0,i.jsx)(t.code,{children:"BEGIN"})," events use\n",(0,i.jsx)(t.code,{children:"UNDETERMINED"})," value as previous event."]}),"\n",(0,i.jsxs)(t.li,{children:["Events after first ",(0,i.jsx)(t.code,{children:"ACTIVE"})," state can omit ",(0,i.jsx)(t.code,{children:"state"})," field."]}),"\n",(0,i.jsxs)(t.li,{children:["Handler specific data is filled (e.g. ",(0,i.jsx)(t.code,{children:"numberOfTouches"}),", ",(0,i.jsx)(t.code,{children:"x"})," fields) with\ndefaults."]}),"\n",(0,i.jsxs)(t.li,{children:["Missing ",(0,i.jsx)(t.code,{children:"BEGIN"})," and ",(0,i.jsx)(t.code,{children:"END"})," events are added with data copied from first and last\npassed event, respectively."]}),"\n",(0,i.jsxs)(t.li,{children:["If first event don't have ",(0,i.jsx)(t.code,{children:"state"})," field, the ",(0,i.jsx)(t.code,{children:"ACTIVE"})," state is assumed."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Some examples:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",children:"const oldStateFilled = [\n  { state: State.BEGAN },\n  { state: State.ACTIVE },\n  { state: State.END },\n]; // three events with specified state are fired.\n\nconst implicitActiveState = [\n  { state: State.BEGAN },\n  { state: State.ACTIVE },\n  { x: 5 },\n  { state: State.END },\n]; // 4 events, including two ACTIVE events (second one has overridden additional data).\n\nconst implicitBegin = [\n  { x: 1, y: 11 },\n  { x: 2, y: 12, state: State.FAILED },\n]; // 3 events, including implicit BEGAN, one ACTIVE, and one FAILED event with additional data.\n\nconst implicitBeginAndEnd = [\n  { x: 5, y: 15 },\n  { x: 6, y: 16 },\n  { x: 7, y: 17 },\n]; // 5 events, including 3 ACTIVE events and implicit BEGAN and END events. BEGAN uses first event's additional data, END uses last event's additional data.\n\nconst allImplicits = []; // 3 events, one BEGIN, one ACTIVE, one END with defaults.\n"})}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(t.p,{children:["Extracted from RNGH tests, check ",(0,i.jsx)(t.code,{children:"Events.test.tsx"})," for full implementation."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"it('sends events with additional data to handlers', () => {\n  const panHandlers = mockedEventHandlers();\n  render(<SingleHandler handlers={panHandlers} treatStartAsUpdate />);\n  fireGestureHandler<PanGesture>(getByGestureTestId('pan'), [\n    { state: State.BEGAN, translationX: 0 },\n    { state: State.ACTIVE, translationX: 10 },\n    { translationX: 20 },\n    { translationX: 20 },\n    { state: State.END, translationX: 30 },\n  ]);\n\n  expect(panHandlers.active).toHaveBeenCalledTimes(3);\n  expect(panHandlers.active).toHaveBeenLastCalledWith(\n    expect.objectContaining({ translationX: 20 })\n  );\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"getbygesturetestidtestid",children:"getByGestureTestId(testID)"}),"\n",(0,i.jsxs)(t.p,{children:["Returns opaque data type associated with gesture. Gesture is found via ",(0,i.jsx)(t.code,{children:"testID"})," attribute in rendered\ncomponents (see ",(0,i.jsxs)(t.a,{href:"/docs/gestures/pan-gesture#withrefref",children:[(0,i.jsx)(t.code,{children:"withTestID"})," method"]}),")."]}),"\n",(0,i.jsx)(t.h3,{id:"arguments-1",children:"Arguments"}),"\n",(0,i.jsx)(t.h4,{id:"testid",children:(0,i.jsx)(t.code,{children:"testID"})}),"\n",(0,i.jsx)(t.p,{children:"String identifying gesture."}),"\n",(0,i.jsx)(t.h3,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"testID"})," must be unique among components rendered in test."]}),"\n",(0,i.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsxs)(t.p,{children:["See above example for ",(0,i.jsx)(t.code,{children:"fireGestureHandler"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const i={},d=s.createContext(i);function r(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);