"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[7118],{5680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>m});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),o=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},g=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=o(n),c=i,m=u["".concat(d,".").concat(c)]||u[c]||p[c]||r;return n?a.createElement(m,s(s({ref:t},g),{},{components:n})):a.createElement(m,s({ref:t},g))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:i,s[1]=l;for(var o=2;o<r;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var a=n(8168),i=(n(6540),n(5680));const r={id:"testing",title:"Testing with Jest",sidebar_position:4},s=void 0,l={unversionedId:"guides/testing",id:"guides/testing",title:"Testing with Jest",description:"Mocking native modules",source:"@site/docs/guides/testing.md",sourceDirName:"guides",slug:"/guides/testing",permalink:"/react-native-gesture-handler/docs/guides/testing",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/guides/testing.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"testing",title:"Testing with Jest",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Troubleshooting",permalink:"/react-native-gesture-handler/docs/guides/troubleshooting"},next:{title:"Custom swipeable components inside ScrollView (web)",permalink:"/react-native-gesture-handler/docs/guides/swipe-and-scroll"}},d={},o=[{value:"Mocking native modules",id:"mocking-native-modules",level:2},{value:"Testing Gestures&#39; and Gesture handlers&#39; callbacks",id:"testing-gestures-and-gesture-handlers-callbacks",level:2},{value:"fireGestureHandler(gestureOrHandler, eventList)",id:"firegesturehandlergestureorhandler-eventlist",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>gestureOrHandler</code>",id:"gestureorhandler",level:4},{value:"<code>eventList</code>",id:"eventlist",level:4},{value:"Example",id:"example",level:3},{value:"getByGestureTestId(testID)",id:"getbygesturetestidtestid",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"<code>testID</code>",id:"testid",level:4},{value:"Notes",id:"notes",level:3},{value:"Example",id:"example-1",level:3}],g={toc:o},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"mocking-native-modules"},"Mocking native modules"),(0,i.yg)("p",null,"In order to load mocks provided by RNGH add following to your jest config in ",(0,i.yg)("inlineCode",{parentName:"p"},"package.json"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'"setupFiles": ["./node_modules/react-native-gesture-handler/jestSetup.js"]\n')),(0,i.yg)("p",null,"Example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'"jest": {\n  "preset": "react-native",\n  "setupFiles": ["./node_modules/react-native-gesture-handler/jestSetup.js"]\n}\n')),(0,i.yg)("h2",{id:"testing-gestures-and-gesture-handlers-callbacks"},"Testing Gestures' and Gesture handlers' callbacks"),(0,i.yg)("p",null,"RNGH provides an API for triggering selected handlers:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/guides/testing#firegesturehandlergestureorhandler-eventlist"},(0,i.yg)("inlineCode",{parentName:"a"},"fireGestureHandler(gestureOrHandler, eventList)"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/guides/testing#getbygesturetestidtestid"},(0,i.yg)("inlineCode",{parentName:"a"},"getByGestureTestId(testID)")))),(0,i.yg)("h2",{id:"firegesturehandlergestureorhandler-eventlist"},"fireGestureHandler(gestureOrHandler, eventList)"),(0,i.yg)("p",null,"Simulates one event stream (i.e. event sequence starting with ",(0,i.yg)("inlineCode",{parentName:"p"},"BEGIN")," state and ending\nwith one of ",(0,i.yg)("inlineCode",{parentName:"p"},"END"),"/",(0,i.yg)("inlineCode",{parentName:"p"},"FAIL"),"/",(0,i.yg)("inlineCode",{parentName:"p"},"CANCEL")," states), calling appropriate callbacks associated with given gesture handler."),(0,i.yg)("h3",{id:"arguments"},"Arguments"),(0,i.yg)("h4",{id:"gestureorhandler"},(0,i.yg)("inlineCode",{parentName:"h4"},"gestureOrHandler")),(0,i.yg)("p",null,"Represents either:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Gesture handler component found by Jest queries (e.g. ",(0,i.yg)("inlineCode",{parentName:"li"},"getByTestId"),")"),(0,i.yg)("li",{parentName:"ol"},"Gesture found by ",(0,i.yg)("a",{parentName:"li",href:"/docs/guides/testing#getbygesturetestidtestid"},(0,i.yg)("inlineCode",{parentName:"a"},"getByGestureTestId()")))),(0,i.yg)("h4",{id:"eventlist"},(0,i.yg)("inlineCode",{parentName:"h4"},"eventList")),(0,i.yg)("p",null,"Event data passed to appropriate callback. RNGH fills event list if required\ndata is missing using these rules:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"oldState")," is filled using state of the previous event. ",(0,i.yg)("inlineCode",{parentName:"li"},"BEGIN")," events use\n",(0,i.yg)("inlineCode",{parentName:"li"},"UNDETERMINED")," value as previous event."),(0,i.yg)("li",{parentName:"ol"},"Events after first ",(0,i.yg)("inlineCode",{parentName:"li"},"ACTIVE")," state can omit ",(0,i.yg)("inlineCode",{parentName:"li"},"state")," field."),(0,i.yg)("li",{parentName:"ol"},"Handler specific data is filled (e.g. ",(0,i.yg)("inlineCode",{parentName:"li"},"numberOfTouches"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"x")," fields) with\ndefaults."),(0,i.yg)("li",{parentName:"ol"},"Missing ",(0,i.yg)("inlineCode",{parentName:"li"},"BEGIN")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"END")," events are added with data copied from first and last\npassed event, respectively."),(0,i.yg)("li",{parentName:"ol"},"If first event don't have ",(0,i.yg)("inlineCode",{parentName:"li"},"state")," field, the ",(0,i.yg)("inlineCode",{parentName:"li"},"ACTIVE")," state is assumed.")),(0,i.yg)("p",null,"Some examples:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const oldStateFilled = [\n  { state: State.BEGAN },\n  { state: State.ACTIVE },\n  { state: State.END },\n]; // three events with specified state are fired.\n\nconst implicitActiveState = [\n  { state: State.BEGAN },\n  { state: State.ACTIVE },\n  { x: 5 },\n  { state: State.END },\n]; // 4 events, including two ACTIVE events (second one has overridden additional data).\n\nconst implicitBegin = [\n  { x: 1, y: 11 },\n  { x: 2, y: 12, state: State.FAILED },\n]; // 3 events, including implicit BEGAN, one ACTIVE, and one FAILED event with additional data.\n\nconst implicitBeginAndEnd = [\n  { x: 5, y: 15 },\n  { x: 6, y: 16 },\n  { x: 7, y: 17 },\n]; // 5 events, including 3 ACTIVE events and implicit BEGAN and END events. BEGAN uses first event's additional data, END uses last event's additional data.\n\nconst allImplicits = []; // 3 events, one BEGIN, one ACTIVE, one END with defaults.\n")),(0,i.yg)("h3",{id:"example"},"Example"),(0,i.yg)("p",null,"Extracted from RNGH tests, check ",(0,i.yg)("inlineCode",{parentName:"p"},"Events.test.tsx")," for full implementation."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"it('sends events with additional data to handlers', () => {\n  const panHandlers = mockedEventHandlers();\n  render(<SingleHandler handlers={panHandlers} treatStartAsUpdate />);\n  fireGestureHandler<PanGesture>(getByGestureTestId('pan'), [\n    { state: State.BEGAN, translationX: 0 },\n    { state: State.ACTIVE, translationX: 10 },\n    { translationX: 20 },\n    { translationX: 20 },\n    { state: State.END, translationX: 30 },\n  ]);\n\n  expect(panHandlers.active).toHaveBeenCalledTimes(3);\n  expect(panHandlers.active).toHaveBeenLastCalledWith(\n    expect.objectContaining({ translationX: 20 })\n  );\n});\n")),(0,i.yg)("h2",{id:"getbygesturetestidtestid"},"getByGestureTestId(testID)"),(0,i.yg)("p",null,"Returns opaque data type associated with gesture. Gesture is found via ",(0,i.yg)("inlineCode",{parentName:"p"},"testID")," attribute in rendered\ncomponents (see ",(0,i.yg)("a",{parentName:"p",href:"/docs/gestures/pan-gesture#withrefref"},(0,i.yg)("inlineCode",{parentName:"a"},"withTestID")," method"),")."),(0,i.yg)("h3",{id:"arguments-1"},"Arguments"),(0,i.yg)("h4",{id:"testid"},(0,i.yg)("inlineCode",{parentName:"h4"},"testID")),(0,i.yg)("p",null,"String identifying gesture."),(0,i.yg)("h3",{id:"notes"},"Notes"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"testID")," must be unique among components rendered in test."),(0,i.yg)("h3",{id:"example-1"},"Example"),(0,i.yg)("p",null,"See above example for ",(0,i.yg)("inlineCode",{parentName:"p"},"fireGestureHandler"),"."))}p.isMDXComponent=!0}}]);