"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[8635],{2774:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/gesture-handlers/force-gh","title":"ForceTouchGestureHandler (iOS only)","description":"A continuous gesture handler that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.","source":"@site/versioned_docs/version-1.x/api/gesture-handlers/force-gh.md","sourceDirName":"api/gesture-handlers","slug":"/api/gesture-handlers/force-gh","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/force-gh","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/versioned_docs/version-1.x/api/gesture-handlers/force-gh.md","tags":[],"version":"1.x","frontMatter":{"id":"force-gh","title":"ForceTouchGestureHandler (iOS only)","sidebar_label":"Force touch"},"sidebar":"docs","previous":{"title":"Pinch","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/pinch-gh"},"next":{"title":"NativeView","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/nativeview-gh"}}');var o=n(4848),s=n(8453);const i={id:"force-gh",title:"ForceTouchGestureHandler (iOS only)",sidebar_label:"Force touch"},a="Properties",c={},d=[{value:"<code>minForce</code>",id:"minforce",level:3},{value:"<code>maxForce</code>",id:"maxforce",level:3},{value:"<code>feedbackOnActivation</code>",id:"feedbackonactivation",level:3},{value:"Event data",id:"event-data",level:2},{value:"<code>force</code>",id:"force",level:3},{value:"Static method",id:"static-method",level:2},{value:"<code>forceTouchAvailable</code>",id:"forcetouchavailable",level:3},{value:"Example",id:"example",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:["A continuous gesture handler that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.\nThe handler ",(0,o.jsx)(r.a,{href:"/docs/under-the-hood/state#active",children:"activates"})," when pressure of touch if greater or equal than ",(0,o.jsx)(r.code,{children:"minForce"}),". It fails if pressure is greater than ",(0,o.jsx)(r.code,{children:"maxForce"}),"\nGesture callback can be used for continuous tracking of the touch pressure. It provides information for one finger (the first one)."]}),"\n",(0,o.jsx)(r.p,{children:"At the beginning of the gesture, the pressure factor is 0.0. As the pressure increases, the pressure factor increases proportionally. The maximum pressure is 1.0."}),"\n",(0,o.jsxs)(r.p,{children:["The handler is implemented using custom ",(0,o.jsx)(r.a,{href:"https://developer.apple.com/documentation/uikit/uigesturerecognizer",children:"UIGestureRecognizer"})," on iOS. There's no implementation provided on Android and it simply render children without any wrappers.\nSince this behaviour is only provided on some iOS devices, this handler should not be used for defining any crucial behaviors. Use it only as an additional improvement and make all features to be accessed without this handler as well."]}),"\n",(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"properties",children:"Properties"})}),"\n",(0,o.jsxs)(r.p,{children:["See ",(0,o.jsx)(r.a,{href:"common-gh#properties",children:"set of properties inherited from base handler class"}),". Below is a list of properties specific to ",(0,o.jsx)(r.code,{children:"ForceTouchGestureHandler"})," component:"]}),"\n",(0,o.jsx)(r.h3,{id:"minforce",children:(0,o.jsx)(r.code,{children:"minForce"})}),"\n",(0,o.jsxs)(r.p,{children:["A minimal pressure that is required before handler can ",(0,o.jsx)(r.a,{href:"/docs/under-the-hood/state#active",children:"activate"}),". Should be a value from range ",(0,o.jsx)(r.code,{children:"[0.0, 1.0]"}),". Default is ",(0,o.jsx)(r.code,{children:"0.2"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"maxforce",children:(0,o.jsx)(r.code,{children:"maxForce"})}),"\n",(0,o.jsxs)(r.p,{children:["A maximal pressure that could be applied for handler. If the pressure is greater, handler ",(0,o.jsx)(r.a,{href:"/docs/under-the-hood/state#failed",children:"fails"}),". Should be a value from range ",(0,o.jsx)(r.code,{children:"[0.0, 1.0]"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"feedbackonactivation",children:(0,o.jsx)(r.code,{children:"feedbackOnActivation"})}),"\n",(0,o.jsx)(r.p,{children:"Boolean value defining if haptic feedback has to be performed on activation."}),"\n",(0,o.jsx)(r.h2,{id:"event-data",children:"Event data"}),"\n",(0,o.jsxs)(r.p,{children:["See ",(0,o.jsx)(r.a,{href:"common-gh#event-data",children:"set of event attributes from base handler class"}),". Below is a list of gesture event attributes specific to ",(0,o.jsx)(r.code,{children:"ForceTouchGestureHandler"}),":"]}),"\n",(0,o.jsx)(r.h3,{id:"force",children:(0,o.jsx)(r.code,{children:"force"})}),"\n",(0,o.jsx)(r.p,{children:"The pressure of a touch."}),"\n",(0,o.jsx)(r.h2,{id:"static-method",children:"Static method"}),"\n",(0,o.jsx)(r.h3,{id:"forcetouchavailable",children:(0,o.jsx)(r.code,{children:"forceTouchAvailable"})}),"\n",(0,o.jsxs)(r.p,{children:["You may check if it's possible to use ",(0,o.jsx)(r.code,{children:"ForceTouchGestureHandler"})," with ",(0,o.jsx)(r.code,{children:"ForceTouchGestureHandler.forceTouchAvailable"})]}),"\n",(0,o.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(r.p,{children:["See the ",(0,o.jsx)(r.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/basic/forcetouch/index.tsx",children:"force touch handler example"})," from ",(0,o.jsx)(r.a,{href:"../../example",children:"GestureHandler Example App"})," or view it directly on your phone by visiting ",(0,o.jsx)(r.a,{href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo",children:"our expo demo"}),"."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",children:"<ForceTouchGestureHandler\n  minForce={0}\n  onGestureEvent={this._onGestureEvent}\n  onHandlerStateChange={this._onHandlerStateChange}>\n  <Animated.View\n    style={[\n      styles.box,\n      { transform: [{ scale: Animated.add(1, this.force) }] },\n    ]}\n  />\n</ForceTouchGestureHandler>\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(6540);const o={},s=t.createContext(o);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);