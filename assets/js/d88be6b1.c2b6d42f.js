"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[6923],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),h=r,g=p["".concat(l,".").concat(h)]||p[h]||u[h]||o;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(8168),r=(n(6540),n(5680));const o={id:"interactions",title:"Cross handler interactions",sidebar_label:"Cross handler interactions",sidebar_position:3},s=void 0,i={unversionedId:"gesture-handlers/interactions",id:"gesture-handlers/interactions",title:"Cross handler interactions",description:"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.",source:"@site/docs/gesture-handlers/interactions.md",sourceDirName:"gesture-handlers",slug:"/gesture-handlers/interactions",permalink:"/react-native-gesture-handler/docs/gesture-handlers/interactions",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/gesture-handlers/interactions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"interactions",title:"Cross handler interactions",sidebar_label:"Cross handler interactions",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"About Gesture Handlers",permalink:"/react-native-gesture-handler/docs/gesture-handlers/about-handlers"},next:{title:"Common handler properties",permalink:"/react-native-gesture-handler/docs/gesture-handlers/common-gh"}},l={},d=[{value:"Simultaneous recognition",id:"simultaneous-recognition",level:2},{value:"Use cases",id:"use-cases",level:3},{value:"Example",id:"example",level:3},{value:"Awaiting other handlers",id:"awaiting-other-handlers",level:2},{value:"Use cases",id:"use-cases-1",level:3},{value:"Example",id:"example-1",level:3}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("admonition",{type:"warning"},(0,r.yg)("p",{parentName:"admonition"},"The old API will be removed in the future version of Gesture Handler. Please migrate to ",(0,r.yg)("a",{parentName:"p",href:"/docs/gestures/gesture"},"gestures API")," instead. Check out our ",(0,r.yg)("a",{parentName:"p",href:"/docs/guides/upgrading-to-2"},"upgrading guide")," for more information.")),(0,r.yg)("p",null,'Gesture handlers can "communicate" with each other to support complex gestures and control how they ',(0,r.yg)("em",{parentName:"p"},(0,r.yg)("a",{parentName:"em",href:"/docs/under-the-hood/state#active"},"activate"))," in certain scenarios."),(0,r.yg)("p",null,"There are two means of achieving that described in the sections below.\nIn each case, it is necessary to provide a reference of one handler as a property to the other.\nGesture handler relies on ref objects created using ",(0,r.yg)("a",{parentName:"p",href:"https://reactjs.org/docs/refs-and-the-dom.html"},(0,r.yg)("inlineCode",{parentName:"a"},"React.createRef()"))," and introduced in ",(0,r.yg)("a",{parentName:"p",href:"https://reactjs.org/blog/2018/03/29/react-v-16-3.html#createref-api"},"React 16.3"),"."),(0,r.yg)("h2",{id:"simultaneous-recognition"},"Simultaneous recognition"),(0,r.yg)("p",null,"By default, only one gesture handler is allowed to be in the ",(0,r.yg)("a",{parentName:"p",href:"/docs/under-the-hood/state#active"},(0,r.yg)("inlineCode",{parentName:"a"},"ACTIVE"))," state.\nSo when a gesture handler recognizes a gesture it ",(0,r.yg)("a",{parentName:"p",href:"/docs/under-the-hood/state#cancelled"},"cancels")," all other handlers in the ",(0,r.yg)("a",{parentName:"p",href:"/docs/under-the-hood/state#began"},(0,r.yg)("inlineCode",{parentName:"a"},"BEGAN"))," state and prevents any new handlers from receiving a stream of touch events as long as it remains ",(0,r.yg)("a",{parentName:"p",href:"/docs/under-the-hood/state#active"},(0,r.yg)("inlineCode",{parentName:"a"},"ACTIVE")),"."),(0,r.yg)("p",null,"This behavior can be altered using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/gesture-handlers/common-gh#simultaneoushandlers"},(0,r.yg)("inlineCode",{parentName:"a"},"simultaneousHandlers"))," property (available for all types of handlers).\nThis property accepts a ref or an array of refs to other handlers.\nHandlers connected in this way will be allowed to remain in the ",(0,r.yg)("a",{parentName:"p",href:"/docs/under-the-hood/state#active"},(0,r.yg)("inlineCode",{parentName:"a"},"ACTIVE"))," state at the same time."),(0,r.yg)("h3",{id:"use-cases"},"Use cases"),(0,r.yg)("p",null,"Simultaneous recognition needs to be used when implementing a photo preview component that supports zooming (scaling) the photo, rotating and panning it while zoomed in.\nIn this case we would use a ",(0,r.yg)("a",{parentName:"p",href:"/docs/gesture-handlers/pinch-gh"},(0,r.yg)("inlineCode",{parentName:"a"},"PinchGestureHandler")),", ",(0,r.yg)("a",{parentName:"p",href:"/docs/gesture-handlers/rotation-gh"},(0,r.yg)("inlineCode",{parentName:"a"},"RotationGestureHandler"))," and ",(0,r.yg)("a",{parentName:"p",href:"/docs/gesture-handlers/pan-gh"},(0,r.yg)("inlineCode",{parentName:"a"},"PanGestureHandler"))," that would have to simultaneously recognize gestures."),(0,r.yg)("h3",{id:"example"},"Example"),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/recipes/scaleAndRotate/index.tsx"},'"Scale, rotate & tilt" example')," from the GestureHandler Example App or view it directly on your phone by visiting ",(0,r.yg)("a",{parentName:"p",href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo"},"our expo demo"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"class PinchableBox extends React.Component {\n  // ...take a look on full implementation in an Example app\n  render() {\n    const imagePinch = React.createRef();\n    const imageRotation = React.createRef();\n    return (\n      <RotationGestureHandler\n        ref={imageRotation}\n        simultaneousHandlers={imagePinch}\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.View>\n          <PinchGestureHandler\n            ref={imagePinch}\n            simultaneousHandlers={imageRotation}\n            onGestureEvent={this._onPinchGestureEvent}\n            onHandlerStateChange={this._onPinchHandlerStateChange}>\n            <Animated.View style={styles.container} collapsable={false}>\n              <Animated.Image\n                style={[\n                  styles.pinchableImage,\n                  {\n                    /* events-related transformations */\n                  },\n                ]}\n              />\n            </Animated.View>\n          </PinchGestureHandler>\n        </Animated.View>\n      </RotationGestureHandler>\n    );\n  }\n}\n")),(0,r.yg)("h2",{id:"awaiting-other-handlers"},"Awaiting other handlers"),(0,r.yg)("h3",{id:"use-cases-1"},"Use cases"),(0,r.yg)("p",null,"A good example where awaiting is necessary is when we want to have single and double tap handlers registered for one view (a button).\nIn such a case we need to make single tap handler await a double tap.\nOtherwise if we try to perform a double tap the single tap handler will fire just after we hit the button for the first time, consequently ",(0,r.yg)("a",{parentName:"p",href:"/docs/under-the-hood/state#cancelled"},"cancelling")," the double tap handler."),(0,r.yg)("h3",{id:"example-1"},"Example"),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/basic/multitap/index.tsx"},'"Multitap" example')," from GestureHandler Example App or view it directly on your phone by visiting ",(0,r.yg)("a",{parentName:"p",href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo"},"our expo demo"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const doubleTap = React.createRef();\nconst PressBox = () => (\n  <TapGestureHandler\n    onHandlerStateChange={({ nativeEvent }) =>\n      nativeEvent.state === State.ACTIVE && Alert.alert('Single tap!')\n    }\n    waitFor={doubleTap}>\n    <TapGestureHandler\n      ref={doubleTap}\n      onHandlerStateChange={({ nativeEvent }) =>\n        nativeEvent.state === State.ACTIVE && Alert.alert(\"You're so fast\")\n      }\n      numberOfTaps={2}>\n      <View style={styles.box} />\n    </TapGestureHandler>\n  </TapGestureHandler>\n);\n")))}u.isMDXComponent=!0}}]);