"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[5421],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=d(n),g=a,y=s["".concat(c,".").concat(g)]||s[g]||u[g]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=n(8168),a=(n(6540),n(5680));const o={id:"migrating-off-rnghenabledroot",title:"Migrating off RNGHEnabledRootView"},i=void 0,l={unversionedId:"guides/migrating-off-rnghenabledroot",id:"guides/migrating-off-rnghenabledroot",title:"Migrating off RNGHEnabledRootView",description:"Update MainActivity.java",source:"@site/docs/guides/migrating-off-rnghenabledroot.md",sourceDirName:"guides",slug:"/guides/migrating-off-rnghenabledroot",permalink:"/react-native-gesture-handler/docs/guides/migrating-off-rnghenabledroot",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/guides/migrating-off-rnghenabledroot.md",tags:[],version:"current",frontMatter:{id:"migrating-off-rnghenabledroot",title:"Migrating off RNGHEnabledRootView"},sidebar:"tutorialSidebar",previous:{title:"Custom swipeable components inside ScrollView (web)",permalink:"/react-native-gesture-handler/docs/guides/swipe-and-scroll"},next:{title:"Upgrading to the new API introduced in Gesture Handler 2",permalink:"/react-native-gesture-handler/docs/guides/upgrading-to-2"}},c={},d=[{value:"Update <code>MainActivity.java</code>",id:"update-mainactivityjava",level:2},{value:"Check if your app works correctly",id:"check-if-your-app-works-correctly",level:2},{value:"Update your JS code",id:"update-your-js-code",level:2}],p={toc:d},s="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(s,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"update-mainactivityjava"},"Update ",(0,a.yg)("inlineCode",{parentName:"h2"},"MainActivity.java")),(0,a.yg)("p",null,"Update your ",(0,a.yg)("inlineCode",{parentName:"p"},"MainActivity.java")," file (or wherever you create an instance of ",(0,a.yg)("inlineCode",{parentName:"p"},"ReactActivityDelegate"),"), so that it no longer overrides the method responsible for creating ",(0,a.yg)("inlineCode",{parentName:"p"},"ReactRootView")," instance, or modify it so that it no longer uses ",(0,a.yg)("inlineCode",{parentName:"p"},"RNGestureHandlerEnabledRootView"),". Do not forget to remove import for ",(0,a.yg)("inlineCode",{parentName:"p"},"RNGestureHandlerEnabledRootView"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"package com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\n- import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\npublic class MainActivity extends ReactActivity {\n\n-  @Override\n-  protected ReactActivityDelegate createReactActivityDelegate() {\n-    return new ReactActivityDelegate(this, getMainComponentName()) {\n-      @Override\n-      protected ReactRootView createRootView() {\n-       return new RNGestureHandlerEnabledRootView(MainActivity.this);\n-      }\n-    };\n-  }\n}\n")),(0,a.yg)("h2",{id:"check-if-your-app-works-correctly"},"Check if your app works correctly"),(0,a.yg)("p",null,"Some libraries (for example React Navigation) already use ",(0,a.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView")," as a wrapper to enable gesture interactions. In that case you don't have to add one yourself. If gestures in your app work as expected after removing ",(0,a.yg)("inlineCode",{parentName:"p"},"RNGestureHandlerEnabledRootView")," you can skip the next step."),(0,a.yg)("h2",{id:"update-your-js-code"},"Update your JS code"),(0,a.yg)("p",null,"Instead of using ",(0,a.yg)("inlineCode",{parentName:"p"},"RNGestureHandlerEnabledRootView")," wrap your entry point with ",(0,a.yg)("inlineCode",{parentName:"p"},"<GestureHandlerRootView>")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"gestureHandlerRootHOC"),", for example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"export default function App() {\n  return <GestureHandlerRootView style={{ flex: 1 }}>{/* content */}</GestureHandlerRootView>;\n}\n")),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Note that ",(0,a.yg)("inlineCode",{parentName:"p"},"GestureHandlerRootView")," acts like a normal ",(0,a.yg)("inlineCode",{parentName:"p"},"View"),". So if you want it to fill the screen, you will need to pass ",(0,a.yg)("inlineCode",{parentName:"p"},"{ flex: 1 }")," like you'll need to do with a normal View. By default, it'll take the size of the content nested inside.")))}u.isMDXComponent=!0}}]);