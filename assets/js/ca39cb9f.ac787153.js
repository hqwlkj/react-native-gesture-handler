"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[2709],{6941:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"2.x","banner":null,"badge":true,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Fundamentals","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Introduction","href":"/react-native-gesture-handler/docs/","docId":"fundamentals/introduction","unlisted":false},{"type":"link","label":"Installation","href":"/react-native-gesture-handler/docs/fundamentals/installation","docId":"fundamentals/installation","unlisted":false},{"type":"link","label":"Gesture composition & interactions","href":"/react-native-gesture-handler/docs/fundamentals/gesture-composition","docId":"fundamentals/gesture-composition","unlisted":false},{"type":"link","label":"Gesture states & events","href":"/react-native-gesture-handler/docs/fundamentals/states-events","docId":"fundamentals/states-events","unlisted":false}],"href":"/react-native-gesture-handler/docs/category/fundamentals"},{"type":"category","label":"Guides","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Quick start","href":"/react-native-gesture-handler/docs/guides/quickstart/","docId":"guides/quickstart/quickstart","unlisted":false},{"type":"link","label":"Manual gestures","href":"/react-native-gesture-handler/docs/guides/manual-gestures/","docId":"guides/manual-gestures/manual-gestures","unlisted":false},{"type":"link","label":"Troubleshooting","href":"/react-native-gesture-handler/docs/guides/troubleshooting","docId":"guides/troubleshooting","unlisted":false},{"type":"link","label":"Testing with Jest","href":"/react-native-gesture-handler/docs/guides/testing","docId":"guides/testing","unlisted":false},{"type":"link","label":"Custom swipeable components inside ScrollView (web)","href":"/react-native-gesture-handler/docs/guides/swipe-and-scroll","docId":"guides/swipe-and-scroll","unlisted":false},{"type":"link","label":"Migrating off RNGHEnabledRootView","href":"/react-native-gesture-handler/docs/guides/migrating-off-rnghenabledroot","docId":"guides/migrating-off-rnghenabledroot","unlisted":false},{"type":"link","label":"Upgrading to the new API introduced in Gesture Handler 2","href":"/react-native-gesture-handler/docs/guides/upgrading-to-2","docId":"guides/upgrading-to-2","unlisted":false}],"href":"/react-native-gesture-handler/docs/category/guides"},{"type":"category","label":"Gestures","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Gesture detector","href":"/react-native-gesture-handler/docs/gestures/gesture-detector","docId":"gestures/gesture-detector","unlisted":false},{"type":"link","label":"Gesture","href":"/react-native-gesture-handler/docs/gestures/gesture","docId":"gestures/gesture","unlisted":false},{"type":"link","label":"Pan gesture","href":"/react-native-gesture-handler/docs/gestures/pan-gesture","docId":"gestures/pan-gesture","unlisted":false},{"type":"link","label":"Tap gesture","href":"/react-native-gesture-handler/docs/gestures/tap-gesture","docId":"gestures/tap-gesture","unlisted":false},{"type":"link","label":"Long press gesture","href":"/react-native-gesture-handler/docs/gestures/long-press-gesture","docId":"gestures/long-press-gesture","unlisted":false},{"type":"link","label":"Rotation gesture","href":"/react-native-gesture-handler/docs/gestures/rotation-gesture","docId":"gestures/rotation-gesture","unlisted":false},{"type":"link","label":"Pinch gesture","href":"/react-native-gesture-handler/docs/gestures/pinch-gesture","docId":"gestures/pinch-gesture","unlisted":false},{"type":"link","label":"Fling gesture","href":"/react-native-gesture-handler/docs/gestures/fling-gesture","docId":"gestures/fling-gesture","unlisted":false},{"type":"link","label":"Hover gesture","href":"/react-native-gesture-handler/docs/gestures/hover-gesture","docId":"gestures/hover-gesture","unlisted":false},{"type":"link","label":"Force touch gesture","href":"/react-native-gesture-handler/docs/gestures/force-touch-gesture","docId":"gestures/force-touch-gesture","unlisted":false},{"type":"link","label":"Native gesture","href":"/react-native-gesture-handler/docs/gestures/native-gesture","docId":"gestures/native-gesture","unlisted":false},{"type":"link","label":"Manual gesture","href":"/react-native-gesture-handler/docs/gestures/manual-gesture","docId":"gestures/manual-gesture","unlisted":false},{"type":"link","label":"Composed gestures","href":"/react-native-gesture-handler/docs/gestures/composed-gestures","docId":"gestures/composed-gestures","unlisted":false},{"type":"link","label":"Touch events","href":"/react-native-gesture-handler/docs/gestures/touch-events","docId":"gestures/touch-events","unlisted":false},{"type":"link","label":"Gesture state manager","href":"/react-native-gesture-handler/docs/gestures/state-manager","docId":"gestures/state-manager","unlisted":false}],"href":"/react-native-gesture-handler/docs/category/gestures"},{"type":"category","label":"Components","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Buttons","href":"/react-native-gesture-handler/docs/components/buttons","docId":"components/buttons","unlisted":false},{"type":"link","label":"DrawerLayout","href":"/react-native-gesture-handler/docs/components/drawer-layout","docId":"components/drawer-layout","unlisted":false},{"type":"link","label":"Pressable","href":"/react-native-gesture-handler/docs/components/pressable","docId":"components/pressable","unlisted":false},{"type":"link","label":"Reanimated Drawer Layout","href":"/react-native-gesture-handler/docs/components/reanimated-drawer-layout","docId":"components/reanimated-drawer-layout","unlisted":false},{"type":"link","label":"Reanimated Swipeable","href":"/react-native-gesture-handler/docs/components/reanimated_swipeable","docId":"components/reanimated_swipeable","unlisted":false},{"type":"link","label":"Swipeable","href":"/react-native-gesture-handler/docs/components/swipeable","docId":"components/swipeable","unlisted":false},{"type":"link","label":"Touchables","href":"/react-native-gesture-handler/docs/components/touchables","docId":"components/touchables","unlisted":false}],"href":"/react-native-gesture-handler/docs/category/components"},{"type":"category","label":"Under the hood","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"How does it work?","href":"/react-native-gesture-handler/docs/under-the-hood/how-does-it-work","docId":"under-the-hood/how-does-it-work","unlisted":false},{"type":"link","label":"Handler State","href":"/react-native-gesture-handler/docs/under-the-hood/state","docId":"under-the-hood/state","unlisted":false}],"href":"/react-native-gesture-handler/docs/category/under-the-hood"},{"type":"category","label":"Gesture handlers (legacy)","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"About Gesture Handlers","href":"/react-native-gesture-handler/docs/gesture-handlers/about-handlers","docId":"gesture-handlers/about-handlers","unlisted":false},{"type":"link","label":"Cross handler interactions","href":"/react-native-gesture-handler/docs/gesture-handlers/interactions","docId":"gesture-handlers/interactions","unlisted":false},{"type":"link","label":"Common handler properties","href":"/react-native-gesture-handler/docs/gesture-handlers/common-gh","docId":"gesture-handlers/common-gh","unlisted":false},{"type":"link","label":"Pan","href":"/react-native-gesture-handler/docs/gesture-handlers/pan-gh","docId":"gesture-handlers/pan-gh","unlisted":false},{"type":"link","label":"Tap","href":"/react-native-gesture-handler/docs/gesture-handlers/tap-gh","docId":"gesture-handlers/tap-gh","unlisted":false},{"type":"link","label":"Long press","href":"/react-native-gesture-handler/docs/gesture-handlers/longpress-gh","docId":"gesture-handlers/longpress-gh","unlisted":false},{"type":"link","label":"Rotation","href":"/react-native-gesture-handler/docs/gesture-handlers/rotation-gh","docId":"gesture-handlers/rotation-gh","unlisted":false},{"type":"link","label":"Fling","href":"/react-native-gesture-handler/docs/gesture-handlers/fling-gh","docId":"gesture-handlers/fling-gh","unlisted":false},{"type":"link","label":"Pinch","href":"/react-native-gesture-handler/docs/gesture-handlers/pinch-gh","docId":"gesture-handlers/pinch-gh","unlisted":false},{"type":"link","label":"Force touch","href":"/react-native-gesture-handler/docs/gesture-handlers/force-gh","docId":"gesture-handlers/force-gh","unlisted":false},{"type":"link","label":"NativeView","href":"/react-native-gesture-handler/docs/gesture-handlers/nativeview-gh","docId":"gesture-handlers/nativeview-gh","unlisted":false},{"type":"link","label":"createNativeWrapper()","href":"/react-native-gesture-handler/docs/gesture-handlers/create-native-wrapper","docId":"gesture-handlers/create-native-wrapper","unlisted":false}],"href":"/react-native-gesture-handler/docs/category/gesture-handlers-legacy"}]},"docs":{"components/buttons":{"id":"components/buttons","title":"Buttons","description":"Gesture handler library provides native components that can act as buttons. These can be treated as a replacement to TouchableHighlight or TouchableOpacity from RN core. Gesture handler\'s buttons recognize touches in native which makes the recognition process deterministic, allows for rendering ripples on Android in highly performant way (TouchableNativeFeedback requires that touch event does a roundtrip to JS before we can update ripple effect, which makes ripples lag a bit on older phones), and provides native and platform default interaction for buttons that are placed in a scrollable container (in which case the interaction is slightly delayed to prevent button from highlighting when you fling).","sidebar":"tutorialSidebar"},"components/drawer-layout":{"id":"components/drawer-layout","title":"Drawer Layout","description":"This component is deprecated.","sidebar":"tutorialSidebar"},"components/pressable":{"id":"components/pressable","title":"Pressable","description":"This component is a drop-in replacement for the Pressable component.","sidebar":"tutorialSidebar"},"components/reanimated_swipeable":{"id":"components/reanimated_swipeable","title":"Reanimated Swipeable","description":"This component is a drop-in replacement for the Swipeable component, rewritten using Reanimated.","sidebar":"tutorialSidebar"},"components/reanimated-drawer-layout":{"id":"components/reanimated-drawer-layout","title":"Reanimated Drawer Layout","description":"Cross-platform replacement for the React Native\'s DrawerLayoutAndroid component.","sidebar":"tutorialSidebar"},"components/swipeable":{"id":"components/swipeable","title":"Swipeable","description":"This component is deprecated.","sidebar":"tutorialSidebar"},"components/touchables":{"id":"components/touchables","title":"Touchables","description":"Touchables will be removed in the future version of Gesture Handler. Use Pressable instead.","sidebar":"tutorialSidebar"},"fundamentals/gesture-composition":{"id":"fundamentals/gesture-composition","title":"Gesture composition & interactions","description":"Composing gestures is much simpler in RNGH2, you don\'t need to create a ref for every gesture that depends on another one. Instead you can use Race, Simultaneous and Exclusive methods provided by the Gesture object.","sidebar":"tutorialSidebar"},"fundamentals/installation":{"id":"fundamentals/installation","title":"Installation","description":"Requirements","sidebar":"tutorialSidebar"},"fundamentals/introduction":{"id":"fundamentals/introduction","title":"Introduction","description":"Gesture Handler provides a declarative API exposing the native platform\'s touch and gesture system to React Native. It\'s designed to be a replacement of React Native\'s built in touch system called Gesture Responder System. Using native touch handling allows to address the performance limitations of React Native\'s Gesture Responder System. It also provides more control over the platform\'s native components that can handle gestures on their own. If you want to learn more, we recommend this talk by Krzysztof Magiera in which he explains issues with the responder system.","sidebar":"tutorialSidebar"},"fundamentals/states-events":{"id":"fundamentals/states-events","title":"Gesture states & events","description":"Every gesture can be treated as \\"state machine\\".","sidebar":"tutorialSidebar"},"gesture-handlers/about-handlers":{"id":"gesture-handlers/about-handlers","title":"About Gesture Handlers","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/common-gh":{"id":"gesture-handlers/common-gh","title":"Common handler properties","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/create-native-wrapper":{"id":"gesture-handlers/create-native-wrapper","title":"createNativeWrapper","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/fling-gh":{"id":"gesture-handlers/fling-gh","title":"FlingGestureHandler","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/force-gh":{"id":"gesture-handlers/force-gh","title":"ForceTouchGestureHandler (iOS only)","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/interactions":{"id":"gesture-handlers/interactions","title":"Cross handler interactions","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/longpress-gh":{"id":"gesture-handlers/longpress-gh","title":"LongPressGestureHandler","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/nativeview-gh":{"id":"gesture-handlers/nativeview-gh","title":"NativeViewGestureHandler","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/pan-gh":{"id":"gesture-handlers/pan-gh","title":"PanGestureHandler","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/pinch-gh":{"id":"gesture-handlers/pinch-gh","title":"PinchGestureHandler","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/rotation-gh":{"id":"gesture-handlers/rotation-gh","title":"RotationGestureHandler","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/tap-gh":{"id":"gesture-handlers/tap-gh","title":"TapGestureHandler","description":"The old API will be removed in the future version of Gesture Handler. Please migrate to gestures API instead. Check out our upgrading guide for more information.","sidebar":"tutorialSidebar"},"gestures/composed-gestures":{"id":"gestures/composed-gestures","title":"Composed gestures","description":"Composed gestures (Race, Simultaneous, Exclusive) provide a simple way of building relations between gestures. See Gesture Composition for more details.","sidebar":"tutorialSidebar"},"gestures/fling-gesture":{"id":"gestures/fling-gesture","title":"Fling gesture","description":"<InteractiveExample","sidebar":"tutorialSidebar"},"gestures/force-touch-gesture":{"id":"gestures/force-touch-gesture","title":"Force touch gesture (iOS only)","description":"ForceTouch gesture is depracted and will be removed in the future version of Gesture Handler.","sidebar":"tutorialSidebar"},"gestures/gesture":{"id":"gestures/gesture","title":"Gesture","description":"Gesture is the object that allows you to create and compose gestures.","sidebar":"tutorialSidebar"},"gestures/gesture-detector":{"id":"gestures/gesture-detector","title":"GestureDetector","description":"GestureDetector is the main component of the RNGH2. It is responsible for creating and updating native gesture handlers based on the config of provided gesture. The most significant difference between it and old gesture handlers is that the GestureDetector can recognize more than one gesture at the time thanks to gesture composition. Keep in mind that GestureDetector is not compatible with the Animated API, nor with Reanimated 1.","sidebar":"tutorialSidebar"},"gestures/hover-gesture":{"id":"gestures/hover-gesture","title":"Hover gesture","description":"<InteractiveExample","sidebar":"tutorialSidebar"},"gestures/long-press-gesture":{"id":"gestures/long-press-gesture","title":"Long press gesture","description":"<InteractiveExample","sidebar":"tutorialSidebar"},"gestures/manual-gesture":{"id":"gestures/manual-gesture","title":"Manual gesture","description":"A plain gesture that has no specific activation criteria nor event data set. Its state has to be controlled manually using a state manager. It will not fail when all the pointers are lifted from the screen.","sidebar":"tutorialSidebar"},"gestures/native-gesture":{"id":"gestures/native-gesture","title":"Native gesture","description":"A gesture that allows other touch handling components to work within RNGH\'s gesture system. This streamlines interactions between gestures and the native component, allowing it to form relations with other gestures.","sidebar":"tutorialSidebar"},"gestures/pan-gesture":{"id":"gestures/pan-gesture","title":"Pan gesture","description":"<InteractiveExample","sidebar":"tutorialSidebar"},"gestures/pinch-gesture":{"id":"gestures/pinch-gesture","title":"Pinch gesture","description":"<InteractiveExample","sidebar":"tutorialSidebar"},"gestures/rotation-gesture":{"id":"gestures/rotation-gesture","title":"Rotation gesture","description":"<InteractiveExample","sidebar":"tutorialSidebar"},"gestures/state-manager":{"id":"gestures/state-manager","title":"Gesture state manager","description":"GestureStateManager allows to manually control the state of the gestures. Please note that react-native-reanimated is required to use it, since it allows for synchronously executing methods in worklets.","sidebar":"tutorialSidebar"},"gestures/tap-gesture":{"id":"gestures/tap-gesture","title":"Tap gesture","description":"<InteractiveExample","sidebar":"tutorialSidebar"},"gestures/touch-events":{"id":"gestures/touch-events","title":"Touch events","description":"Touch event attributes:","sidebar":"tutorialSidebar"},"guides/manual-gestures/manual-gestures":{"id":"guides/manual-gestures/manual-gestures","title":"Manual gestures","description":"RNGH2 finally brings one of the most requested features: manual gestures and touch events. To demonstrate how to make a manual gesture we will make a simple one that tracks all pointers on the screen.","sidebar":"tutorialSidebar"},"guides/migrating-off-rnghenabledroot":{"id":"guides/migrating-off-rnghenabledroot","title":"Migrating off RNGHEnabledRootView","description":"Update MainActivity.java","sidebar":"tutorialSidebar"},"guides/quickstart/quickstart":{"id":"guides/quickstart/quickstart","title":"Quick start","description":"RNGH2 provides much simpler way to add gestures to your app. All you need to do is wrap the view that you want your gesture to work on with GestureDetector, define the gesture and pass it to detector. That\'s all!","sidebar":"tutorialSidebar"},"guides/swipe-and-scroll":{"id":"guides/swipe-and-scroll","title":"Custom swipeable components inside ScrollView (web)","description":"While we recommend using our own ReanimatedSwipeable component, creating your own version of swipeable gives you more control over its behavior. Common issue here is that after creating your own swipeable component, scroll does not work. In that case, try adding touchAction set to \\"pan-y\\", like this:","sidebar":"tutorialSidebar"},"guides/testing":{"id":"guides/testing","title":"Testing with Jest","description":"Mocking native modules","sidebar":"tutorialSidebar"},"guides/troubleshooting":{"id":"guides/troubleshooting","title":"Troubleshooting","description":"Troubleshooting","sidebar":"tutorialSidebar"},"guides/upgrading-to-2":{"id":"guides/upgrading-to-2","title":"Upgrading to the new API introduced in Gesture Handler 2","description":"Make sure to migrate off the RNGestureHandlerEnabledRootView (Android only)","sidebar":"tutorialSidebar"},"under-the-hood/how-does-it-work":{"id":"under-the-hood/how-does-it-work","title":"How does it work?","description":"Units","sidebar":"tutorialSidebar"},"under-the-hood/state":{"id":"under-the-hood/state","title":"Handler State","description":"As described in \\"About Gesture Handlers\\", gesture handlers can be treated as \\"state machines\\".","sidebar":"tutorialSidebar"}}}}')}}]);