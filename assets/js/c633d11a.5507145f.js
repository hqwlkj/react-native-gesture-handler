"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[7289],{8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}},9355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/gesture-handlers/longpress-gh","title":"LongPressGestureHandler","description":"A discrete gesture handler that activates when the corresponding view is pressed for a sufficiently long time.","source":"@site/versioned_docs/version-1.x/api/gesture-handlers/longpress-gh.md","sourceDirName":"api/gesture-handlers","slug":"/api/gesture-handlers/longpress-gh","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/longpress-gh","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/versioned_docs/version-1.x/api/gesture-handlers/longpress-gh.md","tags":[],"version":"1.x","frontMatter":{"id":"longpress-gh","title":"LongPressGestureHandler","sidebar_label":"Long press"},"sidebar":"docs","previous":{"title":"Tap","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/tap-gh"},"next":{"title":"Rotation","permalink":"/react-native-gesture-handler/docs/1.x/api/gesture-handlers/rotation-gh"}}');var s=n(4848),i=n(8453);const a={id:"longpress-gh",title:"LongPressGestureHandler",sidebar_label:"Long press"},o=void 0,d={},l=[{value:"Properties",id:"properties",level:2},{value:"<code>minDurationMs</code>",id:"mindurationms",level:3},{value:"<code>maxDist</code>",id:"maxdist",level:3},{value:"Event data",id:"event-data",level:2},{value:"<code>x</code>",id:"x",level:3},{value:"<code>y</code>",id:"y",level:3},{value:"<code>absoluteX</code>",id:"absolutex",level:3},{value:"<code>absoluteY</code>",id:"absolutey",level:3},{value:"<code>duration</code>",id:"duration",level:3},{value:"Example",id:"example",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["A discrete gesture handler that activates when the corresponding view is pressed for a sufficiently long time.\nThis handler's state will turn into ",(0,s.jsx)(t.a,{href:"/docs/under-the-hood/state#end",children:"END"})," immediately after the finger is released.\nThe handler will fail to recognize a touch event if the finger is lifted before the ",(0,s.jsx)(t.a,{href:"#mindurationms",children:"minimum required time"})," or if the finger is moved further than the ",(0,s.jsx)(t.a,{href:"#maxdist",children:"allowable distance"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The handler is implemented using ",(0,s.jsx)(t.a,{href:"https://developer.apple.com/documentation/uikit/uilongpressgesturerecognizer",children:"UILongPressGestureRecognizer"})," on iOS and ",(0,s.jsx)(t.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/android/lib/src/main/java/com/swmansion/gesturehandler/LongPressGestureHandler.kt",children:"LongPressGestureHandler"})," on Android."]}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.p,{children:["See ",(0,s.jsx)(t.a,{href:"common-gh#properties",children:"set of properties inherited from base handler class"}),". Below is a list of properties specific to the ",(0,s.jsx)(t.code,{children:"LongPressGestureHandler"})," component:"]}),"\n",(0,s.jsx)(t.h3,{id:"mindurationms",children:(0,s.jsx)(t.code,{children:"minDurationMs"})}),"\n",(0,s.jsx)(t.p,{children:"Minimum time, expressed in milliseconds, that a finger must remain pressed on the corresponding view. The default value is 500."}),"\n",(0,s.jsx)(t.h3,{id:"maxdist",children:(0,s.jsx)(t.code,{children:"maxDist"})}),"\n",(0,s.jsxs)(t.p,{children:["Maximum distance, expressed in points, that defines how far the finger is allowed to travel during a long press gesture. If the finger travels further than the defined distance and the handler hasn't yet ",(0,s.jsx)(t.a,{href:"/docs/under-the-hood/state#active",children:"activated"}),", it will fail to recognize the gesture. The default value is 10."]}),"\n",(0,s.jsx)(t.h2,{id:"event-data",children:"Event data"}),"\n",(0,s.jsxs)(t.p,{children:["See ",(0,s.jsx)(t.a,{href:"common-gh#event-data",children:"set of event attributes from base handler class"}),". Below is a list of gesture event attributes specific to the ",(0,s.jsx)(t.code,{children:"LongPressGestureHandler"})," component:"]}),"\n",(0,s.jsx)(t.h3,{id:"x",children:(0,s.jsx)(t.code,{children:"x"})}),"\n",(0,s.jsx)(t.p,{children:"X coordinate, expressed in points, of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the view attached to the handler."}),"\n",(0,s.jsx)(t.h3,{id:"y",children:(0,s.jsx)(t.code,{children:"y"})}),"\n",(0,s.jsx)(t.p,{children:"Y coordinate, expressed in points, of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the view attached to the handler."}),"\n",(0,s.jsx)(t.h3,{id:"absolutex",children:(0,s.jsx)(t.code,{children:"absoluteX"})}),"\n",(0,s.jsxs)(t.p,{children:["X coordinate, expressed in points, of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the root view. It is recommended to use ",(0,s.jsx)(t.code,{children:"absoluteX"})," instead of ",(0,s.jsx)(t.a,{href:"#x",children:(0,s.jsx)(t.code,{children:"x"})})," in cases when the view attached to the handler can be transformed as an effect of the gesture."]}),"\n",(0,s.jsx)(t.h3,{id:"absolutey",children:(0,s.jsx)(t.code,{children:"absoluteY"})}),"\n",(0,s.jsxs)(t.p,{children:["Y coordinate, expressed in points, of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the root view. It is recommended to use ",(0,s.jsx)(t.code,{children:"absoluteY"})," instead of ",(0,s.jsx)(t.a,{href:"#y",children:(0,s.jsx)(t.code,{children:"y"})})," in cases when the view attached to the handler can be transformed as an effect of the gesture."]}),"\n",(0,s.jsx)(t.h3,{id:"duration",children:(0,s.jsx)(t.code,{children:"duration"})}),"\n",(0,s.jsx)(t.p,{children:"Duration of the long press (time since the start of the event), expressed in milliseconds."}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/basic/multitap/index.tsx",children:"multitap example"})," from ",(0,s.jsx)(t.a,{href:"/react-native-gesture-handler/docs/1.x/example",children:"GestureHandler Example App"})," or view it directly on your phone by visiting ",(0,s.jsx)(t.a,{href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo",children:"our expo demo"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'const LongPressButton = () => (\n  <LongPressGestureHandler\n    onHandlerStateChange={({ nativeEvent }) => {\n      if (nativeEvent.state === State.ACTIVE) {\n        Alert.alert("I\'m being pressed for so long");\n      }\n    }}\n    minDurationMs={800}>\n    <View style={styles.box} />\n  </LongPressGestureHandler>\n);\n'})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);