"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[5717],{5680:(e,n,a)=>{a.d(n,{xA:()=>s,yg:()=>m});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),p=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=p(a),y=r,m=g["".concat(d,".").concat(y)]||g[y]||u[y]||i;return a?t.createElement(m,o(o({ref:n},s),{},{components:a})):t.createElement(m,o({ref:n},s))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=y;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}y.displayName="MDXCreateElement"},2592:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var t=a(8168),r=(a(6540),a(5680)),i=a(6025);const o={id:"reanimated-drawer-layout",title:"Reanimated Drawer Layout",sidebar_label:"Reanimated Drawer Layout"},l=void 0,d={unversionedId:"components/reanimated-drawer-layout",id:"components/reanimated-drawer-layout",title:"Reanimated Drawer Layout",description:"Cross-platform replacement for the React Native's DrawerLayoutAndroid component.",source:"@site/docs/components/reanimated-drawer-layout.mdx",sourceDirName:"components",slug:"/components/reanimated-drawer-layout",permalink:"/react-native-gesture-handler/docs/components/reanimated-drawer-layout",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/components/reanimated-drawer-layout.mdx",tags:[],version:"current",frontMatter:{id:"reanimated-drawer-layout",title:"Reanimated Drawer Layout",sidebar_label:"Reanimated Drawer Layout"},sidebar:"tutorialSidebar",previous:{title:"Pressable",permalink:"/react-native-gesture-handler/docs/components/pressable"},next:{title:"Reanimated Swipeable",permalink:"/react-native-gesture-handler/docs/components/reanimated_swipeable"}},p={},s=[{value:"Usage:",id:"usage",level:3},{value:"Properties:",id:"properties",level:2},{value:"<code>drawerType</code>",id:"drawertype",level:3},{value:"<code>edgeWidth</code>",id:"edgewidth",level:3},{value:"<code>hideStatusBar</code>",id:"hidestatusbar",level:3},{value:"<code>statusBarAnimation</code>",id:"statusbaranimation",level:3},{value:"<code>overlayColor</code>",id:"overlaycolor",level:3},{value:"<code>renderNavigationView</code>",id:"rendernavigationview",level:3},{value:"<code>onDrawerClose</code>",id:"ondrawerclose",level:3},{value:"<code>onDrawerOpen</code>",id:"ondraweropen",level:3},{value:"<code>onDrawerSlide</code>",id:"ondrawerslide",level:3},{value:"<code>onDrawerStateChanged</code>",id:"ondrawerstatechanged",level:3},{value:"<code>enableTrackpadTwoFingerGesture</code> (iOS only)",id:"enabletrackpadtwofingergesture-ios-only",level:3},{value:"<code>children</code>",id:"children",level:3},{value:"<code>mouseButton(value: MouseButton)</code> (Web &amp; Android only)",id:"mousebuttonvalue-mousebutton-web--android-only",level:3},{value:"<code>enableContextMenu(value: boolean)</code> (Web only)",id:"enablecontextmenuvalue-boolean-web-only",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>openDrawer(options)</code>",id:"opendraweroptions",level:3},{value:"<code>closeDrawer(options)</code>",id:"closedraweroptions",level:3},{value:"Example:",id:"example",level:2}],g={toc:s},u="wrapper";function y(e){let{components:n,...a}=e;return(0,r.yg)(u,(0,t.A)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Cross-platform replacement for the React Native's ",(0,r.yg)("a",{parentName:"p",href:"http://reactnative.dev/docs/drawerlayoutandroid.html"},"DrawerLayoutAndroid")," component.",(0,r.yg)("br",{parentName:"p"}),"\n","For detailed usage of standard parameters, please refer to the ",(0,r.yg)("a",{parentName:"p",href:"http://reactnative.dev/docs/drawerlayoutandroid.html"},"React Native docs"),"."),(0,r.yg)("h3",{id:"usage"},"Usage:"),(0,r.yg)("p",null,"To use it, import it in the following way:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import ReanimatedDrawerLayout from 'react-native-gesture-handler/ReanimatedDrawerLayout';\n")),(0,r.yg)("h2",{id:"properties"},"Properties:"),(0,r.yg)("h3",{id:"drawertype"},(0,r.yg)("inlineCode",{parentName:"h3"},"drawerType")),(0,r.yg)("p",null,"specifies the way the drawer will be displayed.\nAccepts values of the ",(0,r.yg)("inlineCode",{parentName:"p"},"DrawerPosition")," enum. Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"FRONT"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"FRONT")," the drawer will be displayed above the content view."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"BACK")," the drawer will be displayed below the content view, revealed by sliding away the content view."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"SLIDE")," the drawer will appear attached to the content view, opening it slides both the drawer and the content view.")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"th"},"FRONT")),(0,r.yg)("th",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"th"},"BACK")),(0,r.yg)("th",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"th"},"SLIDE")))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("img",{src:(0,i.A)("gifs/new-drawer-front.gif")})),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("img",{src:(0,i.A)("gifs/new-drawer-back.gif")})),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("img",{src:(0,i.A)("gifs/new-drawer-slide.gif")}))))),(0,r.yg)("h3",{id:"edgewidth"},(0,r.yg)("inlineCode",{parentName:"h3"},"edgeWidth")),(0,r.yg)("p",null,"width of the invisible, draggable area on the edge of the content view, which can be dragged to open the drawer."),(0,r.yg)("h3",{id:"hidestatusbar"},(0,r.yg)("inlineCode",{parentName:"h3"},"hideStatusBar")),(0,r.yg)("p",null,"a boolean value. When set to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", drawer component will use ",(0,r.yg)("a",{parentName:"p",href:"http://reactnative.dev/docs/statusbar.html"},"StatusBar API")," to hide the OS status bar when the drawer is dragged or idle in the ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," position."),(0,r.yg)("h3",{id:"statusbaranimation"},(0,r.yg)("inlineCode",{parentName:"h3"},"statusBarAnimation")),(0,r.yg)("p",null,"a string with possible values: ",(0,r.yg)("inlineCode",{parentName:"p"},"slide"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"none")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"fade"),". Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"slide"),".\nMay be used in combination with ",(0,r.yg)("inlineCode",{parentName:"p"},"hideStatusBar")," to select the animation used for hiding the status bar.\nSee ",(0,r.yg)("a",{parentName:"p",href:"http://reactnative.dev/docs/statusbar.html#statusbaranimation"},"StatusBar API")," docs."),(0,r.yg)("h3",{id:"overlaycolor"},(0,r.yg)("inlineCode",{parentName:"h3"},"overlayColor")),(0,r.yg)("p",null,"color of the background overlay on top of the content window when the drawer is ",(0,r.yg)("inlineCode",{parentName:"p"},"open"),".",(0,r.yg)("br",{parentName:"p"}),"\n","This color's opacity animates from 0% to 100% as the drawer transitions from closed to open. Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"rgba(0, 0, 0, 0.7)"),"."),(0,r.yg)("h3",{id:"rendernavigationview"},(0,r.yg)("inlineCode",{parentName:"h3"},"renderNavigationView")),(0,r.yg)("p",null,"a renderer function for the drawer component, provided with a ",(0,r.yg)("inlineCode",{parentName:"p"},"progress")," parameter."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"progress")," - ",(0,r.yg)("inlineCode",{parentName:"li"},"SharedValue")," that indicates the progress of drawer opening/closing animation.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"equals ",(0,r.yg)("inlineCode",{parentName:"li"},"0")," when the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is closed and ",(0,r.yg)("inlineCode",{parentName:"li"},"1")," when the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is opened"),(0,r.yg)("li",{parentName:"ul"},"can be used by the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," component to animated its children while the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is opening or closing")))),(0,r.yg)("h3",{id:"ondrawerclose"},(0,r.yg)("inlineCode",{parentName:"h3"},"onDrawerClose")),(0,r.yg)("p",null,"a function which is called when the drawer has been closed."),(0,r.yg)("h3",{id:"ondraweropen"},(0,r.yg)("inlineCode",{parentName:"h3"},"onDrawerOpen")),(0,r.yg)("p",null,"a function which is called when the drawer has been opened."),(0,r.yg)("h3",{id:"ondrawerslide"},(0,r.yg)("inlineCode",{parentName:"h3"},"onDrawerSlide")),(0,r.yg)("p",null,"a function which is called when drawer is moving or animating, provided with a ",(0,r.yg)("inlineCode",{parentName:"p"},"progress")," parameter."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"progress")," - ",(0,r.yg)("inlineCode",{parentName:"li"},"SharedValue")," that indicates the progress of drawer opening/closing animation.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"equals ",(0,r.yg)("inlineCode",{parentName:"li"},"0")," when the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is closed and ",(0,r.yg)("inlineCode",{parentName:"li"},"1")," when the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is opened"),(0,r.yg)("li",{parentName:"ul"},"can be used by the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," component to animated its children while the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is opening or closing")))),(0,r.yg)("h3",{id:"ondrawerstatechanged"},(0,r.yg)("inlineCode",{parentName:"h3"},"onDrawerStateChanged")),(0,r.yg)("p",null,"a function which is called when the status of the drawer changes. It takes two arguments:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"newState")," - interaction state of the drawer. It can be one of the following:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"DrawerState.IDLE")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"DrawerState.DRAGGING")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"DrawerState.SETTLING")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"drawerWillShow")," - ",(0,r.yg)("inlineCode",{parentName:"li"},"true")," when ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," started animating to ",(0,r.yg)("inlineCode",{parentName:"li"},"open")," position, ",(0,r.yg)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,r.yg)("h3",{id:"enabletrackpadtwofingergesture-ios-only"},(0,r.yg)("inlineCode",{parentName:"h3"},"enableTrackpadTwoFingerGesture")," (iOS only)"),(0,r.yg)("p",null,"enables two-finger gestures on supported devices, for example iPads with trackpads.\nIf not enabled, the gesture will require click + drag, with ",(0,r.yg)("inlineCode",{parentName:"p"},"enableTrackpadTwoFingerGesture")," swiping with two fingers will also trigger the gesture."),(0,r.yg)("h3",{id:"children"},(0,r.yg)("inlineCode",{parentName:"h3"},"children")),(0,r.yg)("p",null,"either a component that's rendered in the content view or a function.\nIf ",(0,r.yg)("inlineCode",{parentName:"p"},"children")," is a function, it is provided with a ",(0,r.yg)("inlineCode",{parentName:"p"},"progress")," parameter."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"progress")," - ",(0,r.yg)("inlineCode",{parentName:"li"},"SharedValue")," that indicates the progress of drawer opening/closing animation.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"equals ",(0,r.yg)("inlineCode",{parentName:"li"},"0")," when the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is closed and ",(0,r.yg)("inlineCode",{parentName:"li"},"1")," when the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is opened"),(0,r.yg)("li",{parentName:"ul"},"can be used by the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," component to animated its children while the ",(0,r.yg)("inlineCode",{parentName:"li"},"drawer")," is opening or closing")))),(0,r.yg)("h3",{id:"mousebuttonvalue-mousebutton-web--android-only"},(0,r.yg)("inlineCode",{parentName:"h3"},"mouseButton(value: MouseButton)")," (Web & Android only)"),(0,r.yg)("p",null,"allows users to choose which mouse button should handler respond to.\nThe enum ",(0,r.yg)("inlineCode",{parentName:"p"},"MouseButton")," consists of the following predefined fields:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"LEFT")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"RIGHT")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"MIDDLE")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"BUTTON_4")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"BUTTON_5")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ALL"))),(0,r.yg)("p",null,"Arguments can be combined using ",(0,r.yg)("inlineCode",{parentName:"p"},"|")," operator, e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"mouseButton(MouseButton.LEFT | MouseButton.RIGHT)"),". Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"MouseButton.LEFT"),"."),(0,r.yg)("h3",{id:"enablecontextmenuvalue-boolean-web-only"},(0,r.yg)("inlineCode",{parentName:"h3"},"enableContextMenu(value: boolean)")," (Web only)"),(0,r.yg)("p",null,"specifies whether context menu should be enabled after clicking on underlying view with right mouse button. Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"opendraweroptions"},(0,r.yg)("inlineCode",{parentName:"h3"},"openDrawer(options)")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"openDrawer")," accepts an optional ",(0,r.yg)("inlineCode",{parentName:"p"},"options")," parameter, which is an object with the following optional properties:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"initialVelocity")," - the initial velocity of the object attached to the spring. Defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"0"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"animationSpeed")," - controls speed of the animation. Defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"1"),".")),(0,r.yg)("h3",{id:"closedraweroptions"},(0,r.yg)("inlineCode",{parentName:"h3"},"closeDrawer(options)")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"closeDrawer")," accepts an optional ",(0,r.yg)("inlineCode",{parentName:"p"},"options")," parameter, which is an object with the following optional properties:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"initialVelocity")," - initial velocity of the object attached to the spring. Defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"0"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"animationSpeed")," - controls speed of the animation. Defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"1"),".")),(0,r.yg)("h2",{id:"example"},"Example:"),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/release_tests/reanimatedDrawerLayout/index.tsx"},"reanimated drawer layout example")," from GestureHandler example app."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import React, { useRef } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nimport ReanimatedDrawerLayout, {\n  DrawerType,\n  DrawerPosition,\n  DrawerLayoutMethods,\n} from 'react-native-gesture-handler/ReanimatedDrawerLayout';\n\nconst DrawerPage = () => {\n  return (\n    <View style={styles.drawerContainer}>\n      <Text>Lorem ipsum</Text>\n    </View>\n  );\n};\n\nexport default function ReanimatedDrawerExample() {\n  const drawerRef = useRef < DrawerLayoutMethods > null;\n  const tapGesture = Gesture.Tap()\n    .runOnJS(true)\n    .onStart(() => drawerRef.current?.openDrawer());\n\n  return (\n    <ReanimatedDrawerLayout\n      ref={drawerRef}\n      renderNavigationView={() => <DrawerPage />}\n      drawerPosition={DrawerPosition.LEFT}\n      drawerType={DrawerType.FRONT}>\n      <View style={styles.innerContainer}>\n        <GestureDetector gesture={tapGesture}>\n          <View style={styles.box}>\n            <Text>Open drawer</Text>\n          </View>\n        </GestureDetector>\n      </View>\n    </ReanimatedDrawerLayout>\n  );\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'pink',\n  },\n  innerContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n  },\n  box: {\n    padding: 20,\n    backgroundColor: 'pink',\n  },\n});\n")))}y.isMDXComponent=!0}}]);